
SPI_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b00  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003c88  08003c88  00004c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ca0  08003ca0  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003ca0  08003ca0  00004ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ca8  08003ca8  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ca8  08003ca8  00004ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003cac  08003cac  00004cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003cb0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          00000170  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000017c  2000017c  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ca47  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e3e  00000000  00000000  00011a83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ce0  00000000  00000000  000138c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009fd  00000000  00000000  000145a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000216a2  00000000  00000000  00014fa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e844  00000000  00000000  00036647  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d358b  00000000  00000000  00044e8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00118416  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003660  00000000  00000000  0011845c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  0011babc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003c70 	.word	0x08003c70

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003c70 	.word	0x08003c70

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f000 fc08 	bl	8000cd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 f81a 	bl	80004f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c4:	f000 f9a4 	bl	8000810 <MX_GPIO_Init>
  MX_DMA_Init();
 80004c8:	f000 f982 	bl	80007d0 <MX_DMA_Init>
  MX_ADC1_Init();
 80004cc:	f000 f87c 	bl	80005c8 <MX_ADC1_Init>
  MX_TIM3_Init();
 80004d0:	f000 f930 	bl	8000734 <MX_TIM3_Init>
  MX_SPI1_Init();
 80004d4:	f000 f8f6 	bl	80006c4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 80004d8:	4804      	ldr	r0, [pc, #16]	@ (80004ec <main+0x34>)
 80004da:	f002 ff6d 	bl	80033b8 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer_spi, BUFFER_SIZE);
 80004de:	2204      	movs	r2, #4
 80004e0:	4903      	ldr	r1, [pc, #12]	@ (80004f0 <main+0x38>)
 80004e2:	4804      	ldr	r0, [pc, #16]	@ (80004f4 <main+0x3c>)
 80004e4:	f000 fcaa 	bl	8000e3c <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004e8:	bf00      	nop
 80004ea:	e7fd      	b.n	80004e8 <main+0x30>
 80004ec:	20000128 	.word	0x20000128
 80004f0:	20000170 	.word	0x20000170
 80004f4:	20000028 	.word	0x20000028

080004f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b094      	sub	sp, #80	@ 0x50
 80004fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fe:	f107 0320 	add.w	r3, r7, #32
 8000502:	2230      	movs	r2, #48	@ 0x30
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f003 fb86 	bl	8003c18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050c:	f107 030c 	add.w	r3, r7, #12
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]
 800051a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800051c:	2300      	movs	r3, #0
 800051e:	60bb      	str	r3, [r7, #8]
 8000520:	4b27      	ldr	r3, [pc, #156]	@ (80005c0 <SystemClock_Config+0xc8>)
 8000522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000524:	4a26      	ldr	r2, [pc, #152]	@ (80005c0 <SystemClock_Config+0xc8>)
 8000526:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800052a:	6413      	str	r3, [r2, #64]	@ 0x40
 800052c:	4b24      	ldr	r3, [pc, #144]	@ (80005c0 <SystemClock_Config+0xc8>)
 800052e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000530:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000534:	60bb      	str	r3, [r7, #8]
 8000536:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000538:	2300      	movs	r3, #0
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	4b21      	ldr	r3, [pc, #132]	@ (80005c4 <SystemClock_Config+0xcc>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a20      	ldr	r2, [pc, #128]	@ (80005c4 <SystemClock_Config+0xcc>)
 8000542:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000546:	6013      	str	r3, [r2, #0]
 8000548:	4b1e      	ldr	r3, [pc, #120]	@ (80005c4 <SystemClock_Config+0xcc>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000550:	607b      	str	r3, [r7, #4]
 8000552:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000554:	2302      	movs	r3, #2
 8000556:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000558:	2301      	movs	r3, #1
 800055a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800055c:	2310      	movs	r3, #16
 800055e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000560:	2302      	movs	r3, #2
 8000562:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000564:	2300      	movs	r3, #0
 8000566:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000568:	2308      	movs	r3, #8
 800056a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 800056c:	2350      	movs	r3, #80	@ 0x50
 800056e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000570:	2302      	movs	r3, #2
 8000572:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000574:	2304      	movs	r3, #4
 8000576:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000578:	f107 0320 	add.w	r3, r7, #32
 800057c:	4618      	mov	r0, r3
 800057e:	f001 fe9f 	bl	80022c0 <HAL_RCC_OscConfig>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000588:	f000 f9a2 	bl	80008d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058c:	230f      	movs	r3, #15
 800058e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000590:	2302      	movs	r3, #2
 8000592:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000594:	2380      	movs	r3, #128	@ 0x80
 8000596:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000598:	2300      	movs	r3, #0
 800059a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005a0:	f107 030c 	add.w	r3, r7, #12
 80005a4:	2101      	movs	r1, #1
 80005a6:	4618      	mov	r0, r3
 80005a8:	f002 f902 	bl	80027b0 <HAL_RCC_ClockConfig>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80005b2:	f000 f98d 	bl	80008d0 <Error_Handler>
  }
}
 80005b6:	bf00      	nop
 80005b8:	3750      	adds	r7, #80	@ 0x50
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40023800 	.word	0x40023800
 80005c4:	40007000 	.word	0x40007000

080005c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ce:	463b      	mov	r3, r7
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005da:	4b38      	ldr	r3, [pc, #224]	@ (80006bc <MX_ADC1_Init+0xf4>)
 80005dc:	4a38      	ldr	r2, [pc, #224]	@ (80006c0 <MX_ADC1_Init+0xf8>)
 80005de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80005e0:	4b36      	ldr	r3, [pc, #216]	@ (80006bc <MX_ADC1_Init+0xf4>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005e6:	4b35      	ldr	r3, [pc, #212]	@ (80006bc <MX_ADC1_Init+0xf4>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80005ec:	4b33      	ldr	r3, [pc, #204]	@ (80006bc <MX_ADC1_Init+0xf4>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005f2:	4b32      	ldr	r3, [pc, #200]	@ (80006bc <MX_ADC1_Init+0xf4>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 80005f8:	4b30      	ldr	r3, [pc, #192]	@ (80006bc <MX_ADC1_Init+0xf4>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 4;
 8000600:	4b2e      	ldr	r3, [pc, #184]	@ (80006bc <MX_ADC1_Init+0xf4>)
 8000602:	2204      	movs	r2, #4
 8000604:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000606:	4b2d      	ldr	r3, [pc, #180]	@ (80006bc <MX_ADC1_Init+0xf4>)
 8000608:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800060c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800060e:	4b2b      	ldr	r3, [pc, #172]	@ (80006bc <MX_ADC1_Init+0xf4>)
 8000610:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000614:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000616:	4b29      	ldr	r3, [pc, #164]	@ (80006bc <MX_ADC1_Init+0xf4>)
 8000618:	2200      	movs	r2, #0
 800061a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 800061c:	4b27      	ldr	r3, [pc, #156]	@ (80006bc <MX_ADC1_Init+0xf4>)
 800061e:	2204      	movs	r2, #4
 8000620:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000622:	4b26      	ldr	r3, [pc, #152]	@ (80006bc <MX_ADC1_Init+0xf4>)
 8000624:	2201      	movs	r2, #1
 8000626:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800062a:	4b24      	ldr	r3, [pc, #144]	@ (80006bc <MX_ADC1_Init+0xf4>)
 800062c:	2200      	movs	r2, #0
 800062e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000630:	4822      	ldr	r0, [pc, #136]	@ (80006bc <MX_ADC1_Init+0xf4>)
 8000632:	f000 fbbf 	bl	8000db4 <HAL_ADC_Init>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_ADC1_Init+0x78>
  {
    Error_Handler();
 800063c:	f000 f948 	bl	80008d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000640:	2304      	movs	r3, #4
 8000642:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000644:	2301      	movs	r3, #1
 8000646:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000648:	2301      	movs	r3, #1
 800064a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800064c:	463b      	mov	r3, r7
 800064e:	4619      	mov	r1, r3
 8000650:	481a      	ldr	r0, [pc, #104]	@ (80006bc <MX_ADC1_Init+0xf4>)
 8000652:	f000 fd21 	bl	8001098 <HAL_ADC_ConfigChannel>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800065c:	f000 f938 	bl	80008d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000660:	2305      	movs	r3, #5
 8000662:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000664:	2302      	movs	r3, #2
 8000666:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000668:	463b      	mov	r3, r7
 800066a:	4619      	mov	r1, r3
 800066c:	4813      	ldr	r0, [pc, #76]	@ (80006bc <MX_ADC1_Init+0xf4>)
 800066e:	f000 fd13 	bl	8001098 <HAL_ADC_ConfigChannel>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000678:	f000 f92a 	bl	80008d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800067c:	2306      	movs	r3, #6
 800067e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000680:	2303      	movs	r3, #3
 8000682:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000684:	463b      	mov	r3, r7
 8000686:	4619      	mov	r1, r3
 8000688:	480c      	ldr	r0, [pc, #48]	@ (80006bc <MX_ADC1_Init+0xf4>)
 800068a:	f000 fd05 	bl	8001098 <HAL_ADC_ConfigChannel>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8000694:	f000 f91c 	bl	80008d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000698:	2307      	movs	r3, #7
 800069a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800069c:	2304      	movs	r3, #4
 800069e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a0:	463b      	mov	r3, r7
 80006a2:	4619      	mov	r1, r3
 80006a4:	4805      	ldr	r0, [pc, #20]	@ (80006bc <MX_ADC1_Init+0xf4>)
 80006a6:	f000 fcf7 	bl	8001098 <HAL_ADC_ConfigChannel>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 80006b0:	f000 f90e 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006b4:	bf00      	nop
 80006b6:	3710      	adds	r7, #16
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000028 	.word	0x20000028
 80006c0:	40012000 	.word	0x40012000

080006c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006c8:	4b18      	ldr	r3, [pc, #96]	@ (800072c <MX_SPI1_Init+0x68>)
 80006ca:	4a19      	ldr	r2, [pc, #100]	@ (8000730 <MX_SPI1_Init+0x6c>)
 80006cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006ce:	4b17      	ldr	r3, [pc, #92]	@ (800072c <MX_SPI1_Init+0x68>)
 80006d0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006d6:	4b15      	ldr	r3, [pc, #84]	@ (800072c <MX_SPI1_Init+0x68>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80006dc:	4b13      	ldr	r3, [pc, #76]	@ (800072c <MX_SPI1_Init+0x68>)
 80006de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80006e2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006e4:	4b11      	ldr	r3, [pc, #68]	@ (800072c <MX_SPI1_Init+0x68>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006ea:	4b10      	ldr	r3, [pc, #64]	@ (800072c <MX_SPI1_Init+0x68>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80006f0:	4b0e      	ldr	r3, [pc, #56]	@ (800072c <MX_SPI1_Init+0x68>)
 80006f2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80006f6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	@ (800072c <MX_SPI1_Init+0x68>)
 80006fa:	2238      	movs	r2, #56	@ 0x38
 80006fc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006fe:	4b0b      	ldr	r3, [pc, #44]	@ (800072c <MX_SPI1_Init+0x68>)
 8000700:	2200      	movs	r2, #0
 8000702:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000704:	4b09      	ldr	r3, [pc, #36]	@ (800072c <MX_SPI1_Init+0x68>)
 8000706:	2200      	movs	r2, #0
 8000708:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800070a:	4b08      	ldr	r3, [pc, #32]	@ (800072c <MX_SPI1_Init+0x68>)
 800070c:	2200      	movs	r2, #0
 800070e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000710:	4b06      	ldr	r3, [pc, #24]	@ (800072c <MX_SPI1_Init+0x68>)
 8000712:	220a      	movs	r2, #10
 8000714:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000716:	4805      	ldr	r0, [pc, #20]	@ (800072c <MX_SPI1_Init+0x68>)
 8000718:	f002 fa36 	bl	8002b88 <HAL_SPI_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000722:	f000 f8d5 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	200000d0 	.word	0x200000d0
 8000730:	40013000 	.word	0x40013000

08000734 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800073a:	f107 0308 	add.w	r3, r7, #8
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000748:	463b      	mov	r3, r7
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000750:	4b1d      	ldr	r3, [pc, #116]	@ (80007c8 <MX_TIM3_Init+0x94>)
 8000752:	4a1e      	ldr	r2, [pc, #120]	@ (80007cc <MX_TIM3_Init+0x98>)
 8000754:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 39999;
 8000756:	4b1c      	ldr	r3, [pc, #112]	@ (80007c8 <MX_TIM3_Init+0x94>)
 8000758:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 800075c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800075e:	4b1a      	ldr	r3, [pc, #104]	@ (80007c8 <MX_TIM3_Init+0x94>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000764:	4b18      	ldr	r3, [pc, #96]	@ (80007c8 <MX_TIM3_Init+0x94>)
 8000766:	2263      	movs	r2, #99	@ 0x63
 8000768:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800076a:	4b17      	ldr	r3, [pc, #92]	@ (80007c8 <MX_TIM3_Init+0x94>)
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000770:	4b15      	ldr	r3, [pc, #84]	@ (80007c8 <MX_TIM3_Init+0x94>)
 8000772:	2200      	movs	r2, #0
 8000774:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000776:	4814      	ldr	r0, [pc, #80]	@ (80007c8 <MX_TIM3_Init+0x94>)
 8000778:	f002 fdce 	bl	8003318 <HAL_TIM_Base_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000782:	f000 f8a5 	bl	80008d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000786:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800078a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800078c:	f107 0308 	add.w	r3, r7, #8
 8000790:	4619      	mov	r1, r3
 8000792:	480d      	ldr	r0, [pc, #52]	@ (80007c8 <MX_TIM3_Init+0x94>)
 8000794:	f002 ff70 	bl	8003678 <HAL_TIM_ConfigClockSource>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800079e:	f000 f897 	bl	80008d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80007a2:	2320      	movs	r3, #32
 80007a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007aa:	463b      	mov	r3, r7
 80007ac:	4619      	mov	r1, r3
 80007ae:	4806      	ldr	r0, [pc, #24]	@ (80007c8 <MX_TIM3_Init+0x94>)
 80007b0:	f003 f9a2 	bl	8003af8 <HAL_TIMEx_MasterConfigSynchronization>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80007ba:	f000 f889 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	3718      	adds	r7, #24
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000128 	.word	0x20000128
 80007cc:	40000400 	.word	0x40000400

080007d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	4b0c      	ldr	r3, [pc, #48]	@ (800080c <MX_DMA_Init+0x3c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	4a0b      	ldr	r2, [pc, #44]	@ (800080c <MX_DMA_Init+0x3c>)
 80007e0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80007e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e6:	4b09      	ldr	r3, [pc, #36]	@ (800080c <MX_DMA_Init+0x3c>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2100      	movs	r1, #0
 80007f6:	2038      	movs	r0, #56	@ 0x38
 80007f8:	f000 ffc9 	bl	800178e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80007fc:	2038      	movs	r0, #56	@ 0x38
 80007fe:	f000 ffe2 	bl	80017c6 <HAL_NVIC_EnableIRQ>

}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40023800 	.word	0x40023800

08000810 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08a      	sub	sp, #40	@ 0x28
 8000814:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
 8000824:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	613b      	str	r3, [r7, #16]
 800082a:	4b27      	ldr	r3, [pc, #156]	@ (80008c8 <MX_GPIO_Init+0xb8>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	4a26      	ldr	r2, [pc, #152]	@ (80008c8 <MX_GPIO_Init+0xb8>)
 8000830:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000834:	6313      	str	r3, [r2, #48]	@ 0x30
 8000836:	4b24      	ldr	r3, [pc, #144]	@ (80008c8 <MX_GPIO_Init+0xb8>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800083e:	613b      	str	r3, [r7, #16]
 8000840:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	4b20      	ldr	r3, [pc, #128]	@ (80008c8 <MX_GPIO_Init+0xb8>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	4a1f      	ldr	r2, [pc, #124]	@ (80008c8 <MX_GPIO_Init+0xb8>)
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	6313      	str	r3, [r2, #48]	@ 0x30
 8000852:	4b1d      	ldr	r3, [pc, #116]	@ (80008c8 <MX_GPIO_Init+0xb8>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	60bb      	str	r3, [r7, #8]
 8000862:	4b19      	ldr	r3, [pc, #100]	@ (80008c8 <MX_GPIO_Init+0xb8>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	4a18      	ldr	r2, [pc, #96]	@ (80008c8 <MX_GPIO_Init+0xb8>)
 8000868:	f043 0308 	orr.w	r3, r3, #8
 800086c:	6313      	str	r3, [r2, #48]	@ 0x30
 800086e:	4b16      	ldr	r3, [pc, #88]	@ (80008c8 <MX_GPIO_Init+0xb8>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	f003 0308 	and.w	r3, r3, #8
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	4b12      	ldr	r3, [pc, #72]	@ (80008c8 <MX_GPIO_Init+0xb8>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	4a11      	ldr	r2, [pc, #68]	@ (80008c8 <MX_GPIO_Init+0xb8>)
 8000884:	f043 0302 	orr.w	r3, r3, #2
 8000888:	6313      	str	r3, [r2, #48]	@ 0x30
 800088a:	4b0f      	ldr	r3, [pc, #60]	@ (80008c8 <MX_GPIO_Init+0xb8>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	f003 0302 	and.w	r3, r3, #2
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800089c:	480b      	ldr	r0, [pc, #44]	@ (80008cc <MX_GPIO_Init+0xbc>)
 800089e:	f001 fcdb 	bl	8002258 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80008a2:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80008a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a8:	2301      	movs	r3, #1
 80008aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2300      	movs	r3, #0
 80008b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	4619      	mov	r1, r3
 80008ba:	4804      	ldr	r0, [pc, #16]	@ (80008cc <MX_GPIO_Init+0xbc>)
 80008bc:	f001 fb30 	bl	8001f20 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008c0:	bf00      	nop
 80008c2:	3728      	adds	r7, #40	@ 0x28
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40020c00 	.word	0x40020c00

080008d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d4:	b672      	cpsid	i
}
 80008d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <Error_Handler+0x8>

080008dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	607b      	str	r3, [r7, #4]
 80008e6:	4b10      	ldr	r3, [pc, #64]	@ (8000928 <HAL_MspInit+0x4c>)
 80008e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ea:	4a0f      	ldr	r2, [pc, #60]	@ (8000928 <HAL_MspInit+0x4c>)
 80008ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80008f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000928 <HAL_MspInit+0x4c>)
 80008f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	603b      	str	r3, [r7, #0]
 8000902:	4b09      	ldr	r3, [pc, #36]	@ (8000928 <HAL_MspInit+0x4c>)
 8000904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000906:	4a08      	ldr	r2, [pc, #32]	@ (8000928 <HAL_MspInit+0x4c>)
 8000908:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800090c:	6413      	str	r3, [r2, #64]	@ 0x40
 800090e:	4b06      	ldr	r3, [pc, #24]	@ (8000928 <HAL_MspInit+0x4c>)
 8000910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000912:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000916:	603b      	str	r3, [r7, #0]
 8000918:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091a:	bf00      	nop
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	40023800 	.word	0x40023800

0800092c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08a      	sub	sp, #40	@ 0x28
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a2f      	ldr	r2, [pc, #188]	@ (8000a08 <HAL_ADC_MspInit+0xdc>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d157      	bne.n	80009fe <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	613b      	str	r3, [r7, #16]
 8000952:	4b2e      	ldr	r3, [pc, #184]	@ (8000a0c <HAL_ADC_MspInit+0xe0>)
 8000954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000956:	4a2d      	ldr	r2, [pc, #180]	@ (8000a0c <HAL_ADC_MspInit+0xe0>)
 8000958:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800095c:	6453      	str	r3, [r2, #68]	@ 0x44
 800095e:	4b2b      	ldr	r3, [pc, #172]	@ (8000a0c <HAL_ADC_MspInit+0xe0>)
 8000960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000962:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000966:	613b      	str	r3, [r7, #16]
 8000968:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	4b27      	ldr	r3, [pc, #156]	@ (8000a0c <HAL_ADC_MspInit+0xe0>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	4a26      	ldr	r2, [pc, #152]	@ (8000a0c <HAL_ADC_MspInit+0xe0>)
 8000974:	f043 0301 	orr.w	r3, r3, #1
 8000978:	6313      	str	r3, [r2, #48]	@ 0x30
 800097a:	4b24      	ldr	r3, [pc, #144]	@ (8000a0c <HAL_ADC_MspInit+0xe0>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000986:	23f0      	movs	r3, #240	@ 0xf0
 8000988:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800098a:	2303      	movs	r3, #3
 800098c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000992:	f107 0314 	add.w	r3, r7, #20
 8000996:	4619      	mov	r1, r3
 8000998:	481d      	ldr	r0, [pc, #116]	@ (8000a10 <HAL_ADC_MspInit+0xe4>)
 800099a:	f001 fac1 	bl	8001f20 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800099e:	4b1d      	ldr	r3, [pc, #116]	@ (8000a14 <HAL_ADC_MspInit+0xe8>)
 80009a0:	4a1d      	ldr	r2, [pc, #116]	@ (8000a18 <HAL_ADC_MspInit+0xec>)
 80009a2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80009a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a14 <HAL_ADC_MspInit+0xe8>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000a14 <HAL_ADC_MspInit+0xe8>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80009b0:	4b18      	ldr	r3, [pc, #96]	@ (8000a14 <HAL_ADC_MspInit+0xe8>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80009b6:	4b17      	ldr	r3, [pc, #92]	@ (8000a14 <HAL_ADC_MspInit+0xe8>)
 80009b8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009bc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009be:	4b15      	ldr	r3, [pc, #84]	@ (8000a14 <HAL_ADC_MspInit+0xe8>)
 80009c0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80009c4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009c6:	4b13      	ldr	r3, [pc, #76]	@ (8000a14 <HAL_ADC_MspInit+0xe8>)
 80009c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009cc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80009ce:	4b11      	ldr	r3, [pc, #68]	@ (8000a14 <HAL_ADC_MspInit+0xe8>)
 80009d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009d4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80009d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a14 <HAL_ADC_MspInit+0xe8>)
 80009d8:	2200      	movs	r2, #0
 80009da:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009dc:	4b0d      	ldr	r3, [pc, #52]	@ (8000a14 <HAL_ADC_MspInit+0xe8>)
 80009de:	2200      	movs	r2, #0
 80009e0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80009e2:	480c      	ldr	r0, [pc, #48]	@ (8000a14 <HAL_ADC_MspInit+0xe8>)
 80009e4:	f000 ff0a 	bl	80017fc <HAL_DMA_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80009ee:	f7ff ff6f 	bl	80008d0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a07      	ldr	r2, [pc, #28]	@ (8000a14 <HAL_ADC_MspInit+0xe8>)
 80009f6:	639a      	str	r2, [r3, #56]	@ 0x38
 80009f8:	4a06      	ldr	r2, [pc, #24]	@ (8000a14 <HAL_ADC_MspInit+0xe8>)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009fe:	bf00      	nop
 8000a00:	3728      	adds	r7, #40	@ 0x28
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40012000 	.word	0x40012000
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40020000 	.word	0x40020000
 8000a14:	20000070 	.word	0x20000070
 8000a18:	40026410 	.word	0x40026410

08000a1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08a      	sub	sp, #40	@ 0x28
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a2c      	ldr	r2, [pc, #176]	@ (8000aec <HAL_SPI_MspInit+0xd0>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d152      	bne.n	8000ae4 <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	613b      	str	r3, [r7, #16]
 8000a42:	4b2b      	ldr	r3, [pc, #172]	@ (8000af0 <HAL_SPI_MspInit+0xd4>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a46:	4a2a      	ldr	r2, [pc, #168]	@ (8000af0 <HAL_SPI_MspInit+0xd4>)
 8000a48:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a4e:	4b28      	ldr	r3, [pc, #160]	@ (8000af0 <HAL_SPI_MspInit+0xd4>)
 8000a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a52:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a56:	613b      	str	r3, [r7, #16]
 8000a58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	4b24      	ldr	r3, [pc, #144]	@ (8000af0 <HAL_SPI_MspInit+0xd4>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a62:	4a23      	ldr	r2, [pc, #140]	@ (8000af0 <HAL_SPI_MspInit+0xd4>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a6a:	4b21      	ldr	r3, [pc, #132]	@ (8000af0 <HAL_SPI_MspInit+0xd4>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	60bb      	str	r3, [r7, #8]
 8000a7a:	4b1d      	ldr	r3, [pc, #116]	@ (8000af0 <HAL_SPI_MspInit+0xd4>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7e:	4a1c      	ldr	r2, [pc, #112]	@ (8000af0 <HAL_SPI_MspInit+0xd4>)
 8000a80:	f043 0302 	orr.w	r3, r3, #2
 8000a84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a86:	4b1a      	ldr	r3, [pc, #104]	@ (8000af0 <HAL_SPI_MspInit+0xd4>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8a:	f003 0302 	and.w	r3, r3, #2
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000a92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000aa4:	2305      	movs	r3, #5
 8000aa6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4619      	mov	r1, r3
 8000aae:	4811      	ldr	r0, [pc, #68]	@ (8000af4 <HAL_SPI_MspInit+0xd8>)
 8000ab0:	f001 fa36 	bl	8001f20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000ab4:	2338      	movs	r3, #56	@ 0x38
 8000ab6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac0:	2303      	movs	r3, #3
 8000ac2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ac4:	2305      	movs	r3, #5
 8000ac6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	4619      	mov	r1, r3
 8000ace:	480a      	ldr	r0, [pc, #40]	@ (8000af8 <HAL_SPI_MspInit+0xdc>)
 8000ad0:	f001 fa26 	bl	8001f20 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	2023      	movs	r0, #35	@ 0x23
 8000ada:	f000 fe58 	bl	800178e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000ade:	2023      	movs	r0, #35	@ 0x23
 8000ae0:	f000 fe71 	bl	80017c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ae4:	bf00      	nop
 8000ae6:	3728      	adds	r7, #40	@ 0x28
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40013000 	.word	0x40013000
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40020000 	.word	0x40020000
 8000af8:	40020400 	.word	0x40020400

08000afc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a0e      	ldr	r2, [pc, #56]	@ (8000b44 <HAL_TIM_Base_MspInit+0x48>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d115      	bne.n	8000b3a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	4b0d      	ldr	r3, [pc, #52]	@ (8000b48 <HAL_TIM_Base_MspInit+0x4c>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b16:	4a0c      	ldr	r2, [pc, #48]	@ (8000b48 <HAL_TIM_Base_MspInit+0x4c>)
 8000b18:	f043 0302 	orr.w	r3, r3, #2
 8000b1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b48 <HAL_TIM_Base_MspInit+0x4c>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b22:	f003 0302 	and.w	r3, r3, #2
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	201d      	movs	r0, #29
 8000b30:	f000 fe2d 	bl	800178e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b34:	201d      	movs	r0, #29
 8000b36:	f000 fe46 	bl	80017c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b3a:	bf00      	nop
 8000b3c:	3710      	adds	r7, #16
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40000400 	.word	0x40000400
 8000b48:	40023800 	.word	0x40023800

08000b4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b50:	bf00      	nop
 8000b52:	e7fd      	b.n	8000b50 <NMI_Handler+0x4>

08000b54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b58:	bf00      	nop
 8000b5a:	e7fd      	b.n	8000b58 <HardFault_Handler+0x4>

08000b5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b60:	bf00      	nop
 8000b62:	e7fd      	b.n	8000b60 <MemManage_Handler+0x4>

08000b64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <BusFault_Handler+0x4>

08000b6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <UsageFault_Handler+0x4>

08000b74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr

08000b82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba2:	f000 f8e7 	bl	8000d74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
	...

08000bac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000bb0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000bb4:	4803      	ldr	r0, [pc, #12]	@ (8000bc4 <TIM3_IRQHandler+0x18>)
 8000bb6:	f001 fb68 	bl	800228a <HAL_GPIO_TogglePin>
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000bba:	4803      	ldr	r0, [pc, #12]	@ (8000bc8 <TIM3_IRQHandler+0x1c>)
 8000bbc:	f002 fc6c 	bl	8003498 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40020c00 	.word	0x40020c00
 8000bc8:	20000128 	.word	0x20000128

08000bcc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000bd0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bd4:	4803      	ldr	r0, [pc, #12]	@ (8000be4 <SPI1_IRQHandler+0x18>)
 8000bd6:	f001 fb58 	bl	800228a <HAL_GPIO_TogglePin>
  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000bda:	4803      	ldr	r0, [pc, #12]	@ (8000be8 <SPI1_IRQHandler+0x1c>)
 8000bdc:	f002 f9a0 	bl	8002f20 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40020c00 	.word	0x40020c00
 8000be8:	200000d0 	.word	0x200000d0

08000bec <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000bf2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bf6:	4814      	ldr	r0, [pc, #80]	@ (8000c48 <DMA2_Stream0_IRQHandler+0x5c>)
 8000bf8:	f001 fb47 	bl	800228a <HAL_GPIO_TogglePin>

	  // Ensure SPI is not busy before transmitting
	  if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_READY)
 8000bfc:	4813      	ldr	r0, [pc, #76]	@ (8000c4c <DMA2_Stream0_IRQHandler+0x60>)
 8000bfe:	f002 fa8d 	bl	800311c <HAL_SPI_GetState>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d111      	bne.n	8000c2c <DMA2_Stream0_IRQHandler+0x40>
	  {
	      HAL_StatusTypeDef status = HAL_SPI_Transmit(&hspi1, (uint8_t*)adc_buffer_spi, sizeof(adc_buffer_spi), 10);
 8000c08:	230a      	movs	r3, #10
 8000c0a:	2208      	movs	r2, #8
 8000c0c:	4910      	ldr	r1, [pc, #64]	@ (8000c50 <DMA2_Stream0_IRQHandler+0x64>)
 8000c0e:	480f      	ldr	r0, [pc, #60]	@ (8000c4c <DMA2_Stream0_IRQHandler+0x60>)
 8000c10:	f002 f843 	bl	8002c9a <HAL_SPI_Transmit>
 8000c14:	4603      	mov	r3, r0
 8000c16:	71fb      	strb	r3, [r7, #7]
	      if(status != HAL_OK)
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d00c      	beq.n	8000c38 <DMA2_Stream0_IRQHandler+0x4c>
	      {
	          HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET); // Error indication
 8000c1e:	2201      	movs	r2, #1
 8000c20:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c24:	4808      	ldr	r0, [pc, #32]	@ (8000c48 <DMA2_Stream0_IRQHandler+0x5c>)
 8000c26:	f001 fb17 	bl	8002258 <HAL_GPIO_WritePin>
 8000c2a:	e005      	b.n	8000c38 <DMA2_Stream0_IRQHandler+0x4c>
	      }
	  }
	  else
	  {
	      HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c32:	4805      	ldr	r0, [pc, #20]	@ (8000c48 <DMA2_Stream0_IRQHandler+0x5c>)
 8000c34:	f001 fb10 	bl	8002258 <HAL_GPIO_WritePin>
	  }
  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000c38:	4806      	ldr	r0, [pc, #24]	@ (8000c54 <DMA2_Stream0_IRQHandler+0x68>)
 8000c3a:	f000 ff07 	bl	8001a4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40020c00 	.word	0x40020c00
 8000c4c:	200000d0 	.word	0x200000d0
 8000c50:	20000170 	.word	0x20000170
 8000c54:	20000070 	.word	0x20000070

08000c58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c5c:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <SystemInit+0x20>)
 8000c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c62:	4a05      	ldr	r2, [pc, #20]	@ (8000c78 <SystemInit+0x20>)
 8000c64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cb4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c80:	f7ff ffea 	bl	8000c58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c84:	480c      	ldr	r0, [pc, #48]	@ (8000cb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c86:	490d      	ldr	r1, [pc, #52]	@ (8000cbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c88:	4a0d      	ldr	r2, [pc, #52]	@ (8000cc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c8c:	e002      	b.n	8000c94 <LoopCopyDataInit>

08000c8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c92:	3304      	adds	r3, #4

08000c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c98:	d3f9      	bcc.n	8000c8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c9c:	4c0a      	ldr	r4, [pc, #40]	@ (8000cc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca0:	e001      	b.n	8000ca6 <LoopFillZerobss>

08000ca2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ca2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca4:	3204      	adds	r2, #4

08000ca6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ca6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca8:	d3fb      	bcc.n	8000ca2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000caa:	f002 ffbd 	bl	8003c28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cae:	f7ff fc03 	bl	80004b8 <main>
  bx  lr    
 8000cb2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cb4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cbc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000cc0:	08003cb0 	.word	0x08003cb0
  ldr r2, =_sbss
 8000cc4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000cc8:	2000017c 	.word	0x2000017c

08000ccc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ccc:	e7fe      	b.n	8000ccc <ADC_IRQHandler>
	...

08000cd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cd4:	4b0e      	ldr	r3, [pc, #56]	@ (8000d10 <HAL_Init+0x40>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d10 <HAL_Init+0x40>)
 8000cda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ce0:	4b0b      	ldr	r3, [pc, #44]	@ (8000d10 <HAL_Init+0x40>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a0a      	ldr	r2, [pc, #40]	@ (8000d10 <HAL_Init+0x40>)
 8000ce6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cec:	4b08      	ldr	r3, [pc, #32]	@ (8000d10 <HAL_Init+0x40>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a07      	ldr	r2, [pc, #28]	@ (8000d10 <HAL_Init+0x40>)
 8000cf2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cf6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf8:	2003      	movs	r0, #3
 8000cfa:	f000 fd3d 	bl	8001778 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cfe:	200f      	movs	r0, #15
 8000d00:	f000 f808 	bl	8000d14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d04:	f7ff fdea 	bl	80008dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40023c00 	.word	0x40023c00

08000d14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d1c:	4b12      	ldr	r3, [pc, #72]	@ (8000d68 <HAL_InitTick+0x54>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	4b12      	ldr	r3, [pc, #72]	@ (8000d6c <HAL_InitTick+0x58>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	4619      	mov	r1, r3
 8000d26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d32:	4618      	mov	r0, r3
 8000d34:	f000 fd55 	bl	80017e2 <HAL_SYSTICK_Config>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e00e      	b.n	8000d60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2b0f      	cmp	r3, #15
 8000d46:	d80a      	bhi.n	8000d5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	6879      	ldr	r1, [r7, #4]
 8000d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d50:	f000 fd1d 	bl	800178e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d54:	4a06      	ldr	r2, [pc, #24]	@ (8000d70 <HAL_InitTick+0x5c>)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	e000      	b.n	8000d60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20000000 	.word	0x20000000
 8000d6c:	20000008 	.word	0x20000008
 8000d70:	20000004 	.word	0x20000004

08000d74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d78:	4b06      	ldr	r3, [pc, #24]	@ (8000d94 <HAL_IncTick+0x20>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	4b06      	ldr	r3, [pc, #24]	@ (8000d98 <HAL_IncTick+0x24>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4413      	add	r3, r2
 8000d84:	4a04      	ldr	r2, [pc, #16]	@ (8000d98 <HAL_IncTick+0x24>)
 8000d86:	6013      	str	r3, [r2, #0]
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	20000008 	.word	0x20000008
 8000d98:	20000178 	.word	0x20000178

08000d9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000da0:	4b03      	ldr	r3, [pc, #12]	@ (8000db0 <HAL_GetTick+0x14>)
 8000da2:	681b      	ldr	r3, [r3, #0]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	20000178 	.word	0x20000178

08000db4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d101      	bne.n	8000dca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e033      	b.n	8000e32 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d109      	bne.n	8000de6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f7ff fdaa 	bl	800092c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2200      	movs	r2, #0
 8000ddc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2200      	movs	r2, #0
 8000de2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dea:	f003 0310 	and.w	r3, r3, #16
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d118      	bne.n	8000e24 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000dfa:	f023 0302 	bic.w	r3, r3, #2
 8000dfe:	f043 0202 	orr.w	r2, r3, #2
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f000 fa68 	bl	80012dc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e16:	f023 0303 	bic.w	r3, r3, #3
 8000e1a:	f043 0201 	orr.w	r2, r3, #1
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e22:	e001      	b.n	8000e28 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000e24:	2301      	movs	r3, #1
 8000e26:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d101      	bne.n	8000e5a <HAL_ADC_Start_DMA+0x1e>
 8000e56:	2302      	movs	r3, #2
 8000e58:	e0e9      	b.n	800102e <HAL_ADC_Start_DMA+0x1f2>
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	689b      	ldr	r3, [r3, #8]
 8000e68:	f003 0301 	and.w	r3, r3, #1
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d018      	beq.n	8000ea2 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	689a      	ldr	r2, [r3, #8]
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f042 0201 	orr.w	r2, r2, #1
 8000e7e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e80:	4b6d      	ldr	r3, [pc, #436]	@ (8001038 <HAL_ADC_Start_DMA+0x1fc>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a6d      	ldr	r2, [pc, #436]	@ (800103c <HAL_ADC_Start_DMA+0x200>)
 8000e86:	fba2 2303 	umull	r2, r3, r2, r3
 8000e8a:	0c9a      	lsrs	r2, r3, #18
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	4413      	add	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8000e94:	e002      	b.n	8000e9c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	3b01      	subs	r3, #1
 8000e9a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d1f9      	bne.n	8000e96 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000eac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000eb0:	d107      	bne.n	8000ec2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	689a      	ldr	r2, [r3, #8]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000ec0:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	f003 0301 	and.w	r3, r3, #1
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	f040 80a1 	bne.w	8001014 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000eda:	f023 0301 	bic.w	r3, r3, #1
 8000ede:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d007      	beq.n	8000f04 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000efc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000f10:	d106      	bne.n	8000f20 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f16:	f023 0206 	bic.w	r2, r3, #6
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	645a      	str	r2, [r3, #68]	@ 0x44
 8000f1e:	e002      	b.n	8000f26 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	2200      	movs	r2, #0
 8000f24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f2e:	4b44      	ldr	r3, [pc, #272]	@ (8001040 <HAL_ADC_Start_DMA+0x204>)
 8000f30:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f36:	4a43      	ldr	r2, [pc, #268]	@ (8001044 <HAL_ADC_Start_DMA+0x208>)
 8000f38:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f3e:	4a42      	ldr	r2, [pc, #264]	@ (8001048 <HAL_ADC_Start_DMA+0x20c>)
 8000f40:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f46:	4a41      	ldr	r2, [pc, #260]	@ (800104c <HAL_ADC_Start_DMA+0x210>)
 8000f48:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8000f52:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	685a      	ldr	r2, [r3, #4]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8000f62:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	689a      	ldr	r2, [r3, #8]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000f72:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	334c      	adds	r3, #76	@ 0x4c
 8000f7e:	4619      	mov	r1, r3
 8000f80:	68ba      	ldr	r2, [r7, #8]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	f000 fce8 	bl	8001958 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 031f 	and.w	r3, r3, #31
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d12a      	bne.n	8000fea <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a2d      	ldr	r2, [pc, #180]	@ (8001050 <HAL_ADC_Start_DMA+0x214>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d015      	beq.n	8000fca <HAL_ADC_Start_DMA+0x18e>
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a2c      	ldr	r2, [pc, #176]	@ (8001054 <HAL_ADC_Start_DMA+0x218>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d105      	bne.n	8000fb4 <HAL_ADC_Start_DMA+0x178>
 8000fa8:	4b25      	ldr	r3, [pc, #148]	@ (8001040 <HAL_ADC_Start_DMA+0x204>)
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f003 031f 	and.w	r3, r3, #31
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d00a      	beq.n	8000fca <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a27      	ldr	r2, [pc, #156]	@ (8001058 <HAL_ADC_Start_DMA+0x21c>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d136      	bne.n	800102c <HAL_ADC_Start_DMA+0x1f0>
 8000fbe:	4b20      	ldr	r3, [pc, #128]	@ (8001040 <HAL_ADC_Start_DMA+0x204>)
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f003 0310 	and.w	r3, r3, #16
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d130      	bne.n	800102c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d129      	bne.n	800102c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	689a      	ldr	r2, [r3, #8]
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	e020      	b.n	800102c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a18      	ldr	r2, [pc, #96]	@ (8001050 <HAL_ADC_Start_DMA+0x214>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d11b      	bne.n	800102c <HAL_ADC_Start_DMA+0x1f0>
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d114      	bne.n	800102c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	689a      	ldr	r2, [r3, #8]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001010:	609a      	str	r2, [r3, #8]
 8001012:	e00b      	b.n	800102c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001018:	f043 0210 	orr.w	r2, r3, #16
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001024:	f043 0201 	orr.w	r2, r3, #1
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	3718      	adds	r7, #24
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000000 	.word	0x20000000
 800103c:	431bde83 	.word	0x431bde83
 8001040:	40012300 	.word	0x40012300
 8001044:	080014d5 	.word	0x080014d5
 8001048:	0800158f 	.word	0x0800158f
 800104c:	080015ab 	.word	0x080015ab
 8001050:	40012000 	.word	0x40012000
 8001054:	40012100 	.word	0x40012100
 8001058:	40012200 	.word	0x40012200

0800105c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001078:	bf00      	nop
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80010a2:	2300      	movs	r3, #0
 80010a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d101      	bne.n	80010b4 <HAL_ADC_ConfigChannel+0x1c>
 80010b0:	2302      	movs	r3, #2
 80010b2:	e105      	b.n	80012c0 <HAL_ADC_ConfigChannel+0x228>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2201      	movs	r2, #1
 80010b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b09      	cmp	r3, #9
 80010c2:	d925      	bls.n	8001110 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	68d9      	ldr	r1, [r3, #12]
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	461a      	mov	r2, r3
 80010d2:	4613      	mov	r3, r2
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	4413      	add	r3, r2
 80010d8:	3b1e      	subs	r3, #30
 80010da:	2207      	movs	r2, #7
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43da      	mvns	r2, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	400a      	ands	r2, r1
 80010e8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	68d9      	ldr	r1, [r3, #12]
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	689a      	ldr	r2, [r3, #8]
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	4618      	mov	r0, r3
 80010fc:	4603      	mov	r3, r0
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	4403      	add	r3, r0
 8001102:	3b1e      	subs	r3, #30
 8001104:	409a      	lsls	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	430a      	orrs	r2, r1
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	e022      	b.n	8001156 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	6919      	ldr	r1, [r3, #16]
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	b29b      	uxth	r3, r3
 800111c:	461a      	mov	r2, r3
 800111e:	4613      	mov	r3, r2
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	4413      	add	r3, r2
 8001124:	2207      	movs	r2, #7
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	43da      	mvns	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	400a      	ands	r2, r1
 8001132:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	6919      	ldr	r1, [r3, #16]
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	689a      	ldr	r2, [r3, #8]
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	b29b      	uxth	r3, r3
 8001144:	4618      	mov	r0, r3
 8001146:	4603      	mov	r3, r0
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	4403      	add	r3, r0
 800114c:	409a      	lsls	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	430a      	orrs	r2, r1
 8001154:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	2b06      	cmp	r3, #6
 800115c:	d824      	bhi.n	80011a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685a      	ldr	r2, [r3, #4]
 8001168:	4613      	mov	r3, r2
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	4413      	add	r3, r2
 800116e:	3b05      	subs	r3, #5
 8001170:	221f      	movs	r2, #31
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	43da      	mvns	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	400a      	ands	r2, r1
 800117e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	b29b      	uxth	r3, r3
 800118c:	4618      	mov	r0, r3
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685a      	ldr	r2, [r3, #4]
 8001192:	4613      	mov	r3, r2
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	4413      	add	r3, r2
 8001198:	3b05      	subs	r3, #5
 800119a:	fa00 f203 	lsl.w	r2, r0, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	430a      	orrs	r2, r1
 80011a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80011a6:	e04c      	b.n	8001242 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	2b0c      	cmp	r3, #12
 80011ae:	d824      	bhi.n	80011fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685a      	ldr	r2, [r3, #4]
 80011ba:	4613      	mov	r3, r2
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	4413      	add	r3, r2
 80011c0:	3b23      	subs	r3, #35	@ 0x23
 80011c2:	221f      	movs	r2, #31
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43da      	mvns	r2, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	400a      	ands	r2, r1
 80011d0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	b29b      	uxth	r3, r3
 80011de:	4618      	mov	r0, r3
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685a      	ldr	r2, [r3, #4]
 80011e4:	4613      	mov	r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	4413      	add	r3, r2
 80011ea:	3b23      	subs	r3, #35	@ 0x23
 80011ec:	fa00 f203 	lsl.w	r2, r0, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	430a      	orrs	r2, r1
 80011f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80011f8:	e023      	b.n	8001242 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685a      	ldr	r2, [r3, #4]
 8001204:	4613      	mov	r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	4413      	add	r3, r2
 800120a:	3b41      	subs	r3, #65	@ 0x41
 800120c:	221f      	movs	r2, #31
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43da      	mvns	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	400a      	ands	r2, r1
 800121a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	b29b      	uxth	r3, r3
 8001228:	4618      	mov	r0, r3
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685a      	ldr	r2, [r3, #4]
 800122e:	4613      	mov	r3, r2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	4413      	add	r3, r2
 8001234:	3b41      	subs	r3, #65	@ 0x41
 8001236:	fa00 f203 	lsl.w	r2, r0, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	430a      	orrs	r2, r1
 8001240:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001242:	4b22      	ldr	r3, [pc, #136]	@ (80012cc <HAL_ADC_ConfigChannel+0x234>)
 8001244:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a21      	ldr	r2, [pc, #132]	@ (80012d0 <HAL_ADC_ConfigChannel+0x238>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d109      	bne.n	8001264 <HAL_ADC_ConfigChannel+0x1cc>
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2b12      	cmp	r3, #18
 8001256:	d105      	bne.n	8001264 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a19      	ldr	r2, [pc, #100]	@ (80012d0 <HAL_ADC_ConfigChannel+0x238>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d123      	bne.n	80012b6 <HAL_ADC_ConfigChannel+0x21e>
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2b10      	cmp	r3, #16
 8001274:	d003      	beq.n	800127e <HAL_ADC_ConfigChannel+0x1e6>
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2b11      	cmp	r3, #17
 800127c:	d11b      	bne.n	80012b6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2b10      	cmp	r3, #16
 8001290:	d111      	bne.n	80012b6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001292:	4b10      	ldr	r3, [pc, #64]	@ (80012d4 <HAL_ADC_ConfigChannel+0x23c>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a10      	ldr	r2, [pc, #64]	@ (80012d8 <HAL_ADC_ConfigChannel+0x240>)
 8001298:	fba2 2303 	umull	r2, r3, r2, r3
 800129c:	0c9a      	lsrs	r2, r3, #18
 800129e:	4613      	mov	r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	4413      	add	r3, r2
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80012a8:	e002      	b.n	80012b0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	3b01      	subs	r3, #1
 80012ae:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d1f9      	bne.n	80012aa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2200      	movs	r2, #0
 80012ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80012be:	2300      	movs	r3, #0
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	40012300 	.word	0x40012300
 80012d0:	40012000 	.word	0x40012000
 80012d4:	20000000 	.word	0x20000000
 80012d8:	431bde83 	.word	0x431bde83

080012dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012e4:	4b79      	ldr	r3, [pc, #484]	@ (80014cc <ADC_Init+0x1f0>)
 80012e6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	685a      	ldr	r2, [r3, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	431a      	orrs	r2, r3
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	685a      	ldr	r2, [r3, #4]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001310:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	6859      	ldr	r1, [r3, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	691b      	ldr	r3, [r3, #16]
 800131c:	021a      	lsls	r2, r3, #8
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	430a      	orrs	r2, r1
 8001324:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	685a      	ldr	r2, [r3, #4]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001334:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	6859      	ldr	r1, [r3, #4]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689a      	ldr	r2, [r3, #8]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	430a      	orrs	r2, r1
 8001346:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	689a      	ldr	r2, [r3, #8]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001356:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	6899      	ldr	r1, [r3, #8]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	68da      	ldr	r2, [r3, #12]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	430a      	orrs	r2, r1
 8001368:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800136e:	4a58      	ldr	r2, [pc, #352]	@ (80014d0 <ADC_Init+0x1f4>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d022      	beq.n	80013ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	689a      	ldr	r2, [r3, #8]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001382:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6899      	ldr	r1, [r3, #8]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	430a      	orrs	r2, r1
 8001394:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	689a      	ldr	r2, [r3, #8]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80013a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	6899      	ldr	r1, [r3, #8]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	430a      	orrs	r2, r1
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	e00f      	b.n	80013da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	689a      	ldr	r2, [r3, #8]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80013c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	689a      	ldr	r2, [r3, #8]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80013d8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	689a      	ldr	r2, [r3, #8]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f022 0202 	bic.w	r2, r2, #2
 80013e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	6899      	ldr	r1, [r3, #8]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	7e1b      	ldrb	r3, [r3, #24]
 80013f4:	005a      	lsls	r2, r3, #1
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	430a      	orrs	r2, r1
 80013fc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d01b      	beq.n	8001440 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	685a      	ldr	r2, [r3, #4]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001416:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	685a      	ldr	r2, [r3, #4]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001426:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6859      	ldr	r1, [r3, #4]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001432:	3b01      	subs	r3, #1
 8001434:	035a      	lsls	r2, r3, #13
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	430a      	orrs	r2, r1
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	e007      	b.n	8001450 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	685a      	ldr	r2, [r3, #4]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800144e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800145e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	69db      	ldr	r3, [r3, #28]
 800146a:	3b01      	subs	r3, #1
 800146c:	051a      	lsls	r2, r3, #20
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	430a      	orrs	r2, r1
 8001474:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	689a      	ldr	r2, [r3, #8]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001484:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	6899      	ldr	r1, [r3, #8]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001492:	025a      	lsls	r2, r3, #9
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	430a      	orrs	r2, r1
 800149a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	689a      	ldr	r2, [r3, #8]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80014aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6899      	ldr	r1, [r3, #8]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	695b      	ldr	r3, [r3, #20]
 80014b6:	029a      	lsls	r2, r3, #10
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	430a      	orrs	r2, r1
 80014be:	609a      	str	r2, [r3, #8]
}
 80014c0:	bf00      	nop
 80014c2:	3714      	adds	r7, #20
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	40012300 	.word	0x40012300
 80014d0:	0f000001 	.word	0x0f000001

080014d4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014e0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d13c      	bne.n	8001568 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d12b      	bne.n	8001560 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800150c:	2b00      	cmp	r3, #0
 800150e:	d127      	bne.n	8001560 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001516:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800151a:	2b00      	cmp	r3, #0
 800151c:	d006      	beq.n	800152c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001528:	2b00      	cmp	r3, #0
 800152a:	d119      	bne.n	8001560 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	685a      	ldr	r2, [r3, #4]
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f022 0220 	bic.w	r2, r2, #32
 800153a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001540:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d105      	bne.n	8001560 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001558:	f043 0201 	orr.w	r2, r3, #1
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001560:	68f8      	ldr	r0, [r7, #12]
 8001562:	f7ff fd7b 	bl	800105c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001566:	e00e      	b.n	8001586 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156c:	f003 0310 	and.w	r3, r3, #16
 8001570:	2b00      	cmp	r3, #0
 8001572:	d003      	beq.n	800157c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001574:	68f8      	ldr	r0, [r7, #12]
 8001576:	f7ff fd85 	bl	8001084 <HAL_ADC_ErrorCallback>
}
 800157a:	e004      	b.n	8001586 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	4798      	blx	r3
}
 8001586:	bf00      	nop
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b084      	sub	sp, #16
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800159a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800159c:	68f8      	ldr	r0, [r7, #12]
 800159e:	f7ff fd67 	bl	8001070 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80015a2:	bf00      	nop
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b084      	sub	sp, #16
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015b6:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2240      	movs	r2, #64	@ 0x40
 80015bc:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015c2:	f043 0204 	orr.w	r2, r3, #4
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80015ca:	68f8      	ldr	r0, [r7, #12]
 80015cc:	f7ff fd5a 	bl	8001084 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80015d0:	bf00      	nop
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f003 0307 	and.w	r3, r3, #7
 80015e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015e8:	4b0c      	ldr	r3, [pc, #48]	@ (800161c <__NVIC_SetPriorityGrouping+0x44>)
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ee:	68ba      	ldr	r2, [r7, #8]
 80015f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015f4:	4013      	ands	r3, r2
 80015f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001600:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001604:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001608:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800160a:	4a04      	ldr	r2, [pc, #16]	@ (800161c <__NVIC_SetPriorityGrouping+0x44>)
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	60d3      	str	r3, [r2, #12]
}
 8001610:	bf00      	nop
 8001612:	3714      	adds	r7, #20
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	e000ed00 	.word	0xe000ed00

08001620 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001624:	4b04      	ldr	r3, [pc, #16]	@ (8001638 <__NVIC_GetPriorityGrouping+0x18>)
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	0a1b      	lsrs	r3, r3, #8
 800162a:	f003 0307 	and.w	r3, r3, #7
}
 800162e:	4618      	mov	r0, r3
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	e000ed00 	.word	0xe000ed00

0800163c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164a:	2b00      	cmp	r3, #0
 800164c:	db0b      	blt.n	8001666 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	f003 021f 	and.w	r2, r3, #31
 8001654:	4907      	ldr	r1, [pc, #28]	@ (8001674 <__NVIC_EnableIRQ+0x38>)
 8001656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165a:	095b      	lsrs	r3, r3, #5
 800165c:	2001      	movs	r0, #1
 800165e:	fa00 f202 	lsl.w	r2, r0, r2
 8001662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001666:	bf00      	nop
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	e000e100 	.word	0xe000e100

08001678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	6039      	str	r1, [r7, #0]
 8001682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001688:	2b00      	cmp	r3, #0
 800168a:	db0a      	blt.n	80016a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	b2da      	uxtb	r2, r3
 8001690:	490c      	ldr	r1, [pc, #48]	@ (80016c4 <__NVIC_SetPriority+0x4c>)
 8001692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001696:	0112      	lsls	r2, r2, #4
 8001698:	b2d2      	uxtb	r2, r2
 800169a:	440b      	add	r3, r1
 800169c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016a0:	e00a      	b.n	80016b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	4908      	ldr	r1, [pc, #32]	@ (80016c8 <__NVIC_SetPriority+0x50>)
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	f003 030f 	and.w	r3, r3, #15
 80016ae:	3b04      	subs	r3, #4
 80016b0:	0112      	lsls	r2, r2, #4
 80016b2:	b2d2      	uxtb	r2, r2
 80016b4:	440b      	add	r3, r1
 80016b6:	761a      	strb	r2, [r3, #24]
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	e000e100 	.word	0xe000e100
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b089      	sub	sp, #36	@ 0x24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	f1c3 0307 	rsb	r3, r3, #7
 80016e6:	2b04      	cmp	r3, #4
 80016e8:	bf28      	it	cs
 80016ea:	2304      	movcs	r3, #4
 80016ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	3304      	adds	r3, #4
 80016f2:	2b06      	cmp	r3, #6
 80016f4:	d902      	bls.n	80016fc <NVIC_EncodePriority+0x30>
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	3b03      	subs	r3, #3
 80016fa:	e000      	b.n	80016fe <NVIC_EncodePriority+0x32>
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001700:	f04f 32ff 	mov.w	r2, #4294967295
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	43da      	mvns	r2, r3
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	401a      	ands	r2, r3
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001714:	f04f 31ff 	mov.w	r1, #4294967295
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	fa01 f303 	lsl.w	r3, r1, r3
 800171e:	43d9      	mvns	r1, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001724:	4313      	orrs	r3, r2
         );
}
 8001726:	4618      	mov	r0, r3
 8001728:	3724      	adds	r7, #36	@ 0x24
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
	...

08001734 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3b01      	subs	r3, #1
 8001740:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001744:	d301      	bcc.n	800174a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001746:	2301      	movs	r3, #1
 8001748:	e00f      	b.n	800176a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800174a:	4a0a      	ldr	r2, [pc, #40]	@ (8001774 <SysTick_Config+0x40>)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3b01      	subs	r3, #1
 8001750:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001752:	210f      	movs	r1, #15
 8001754:	f04f 30ff 	mov.w	r0, #4294967295
 8001758:	f7ff ff8e 	bl	8001678 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800175c:	4b05      	ldr	r3, [pc, #20]	@ (8001774 <SysTick_Config+0x40>)
 800175e:	2200      	movs	r2, #0
 8001760:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001762:	4b04      	ldr	r3, [pc, #16]	@ (8001774 <SysTick_Config+0x40>)
 8001764:	2207      	movs	r2, #7
 8001766:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	e000e010 	.word	0xe000e010

08001778 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f7ff ff29 	bl	80015d8 <__NVIC_SetPriorityGrouping>
}
 8001786:	bf00      	nop
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800178e:	b580      	push	{r7, lr}
 8001790:	b086      	sub	sp, #24
 8001792:	af00      	add	r7, sp, #0
 8001794:	4603      	mov	r3, r0
 8001796:	60b9      	str	r1, [r7, #8]
 8001798:	607a      	str	r2, [r7, #4]
 800179a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017a0:	f7ff ff3e 	bl	8001620 <__NVIC_GetPriorityGrouping>
 80017a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	68b9      	ldr	r1, [r7, #8]
 80017aa:	6978      	ldr	r0, [r7, #20]
 80017ac:	f7ff ff8e 	bl	80016cc <NVIC_EncodePriority>
 80017b0:	4602      	mov	r2, r0
 80017b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017b6:	4611      	mov	r1, r2
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff ff5d 	bl	8001678 <__NVIC_SetPriority>
}
 80017be:	bf00      	nop
 80017c0:	3718      	adds	r7, #24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b082      	sub	sp, #8
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	4603      	mov	r3, r0
 80017ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff ff31 	bl	800163c <__NVIC_EnableIRQ>
}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b082      	sub	sp, #8
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7ff ffa2 	bl	8001734 <SysTick_Config>
 80017f0:	4603      	mov	r3, r0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
	...

080017fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001808:	f7ff fac8 	bl	8000d9c <HAL_GetTick>
 800180c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d101      	bne.n	8001818 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e099      	b.n	800194c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2202      	movs	r2, #2
 800181c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f022 0201 	bic.w	r2, r2, #1
 8001836:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001838:	e00f      	b.n	800185a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800183a:	f7ff faaf 	bl	8000d9c <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b05      	cmp	r3, #5
 8001846:	d908      	bls.n	800185a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2220      	movs	r2, #32
 800184c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2203      	movs	r2, #3
 8001852:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e078      	b.n	800194c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0301 	and.w	r3, r3, #1
 8001864:	2b00      	cmp	r3, #0
 8001866:	d1e8      	bne.n	800183a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001870:	697a      	ldr	r2, [r7, #20]
 8001872:	4b38      	ldr	r3, [pc, #224]	@ (8001954 <HAL_DMA_Init+0x158>)
 8001874:	4013      	ands	r3, r2
 8001876:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685a      	ldr	r2, [r3, #4]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001886:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	691b      	ldr	r3, [r3, #16]
 800188c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001892:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800189e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a1b      	ldr	r3, [r3, #32]
 80018a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018a6:	697a      	ldr	r2, [r7, #20]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018b0:	2b04      	cmp	r3, #4
 80018b2:	d107      	bne.n	80018c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018bc:	4313      	orrs	r3, r2
 80018be:	697a      	ldr	r2, [r7, #20]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	697a      	ldr	r2, [r7, #20]
 80018ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	695b      	ldr	r3, [r3, #20]
 80018d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	f023 0307 	bic.w	r3, r3, #7
 80018da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e0:	697a      	ldr	r2, [r7, #20]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ea:	2b04      	cmp	r3, #4
 80018ec:	d117      	bne.n	800191e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018f2:	697a      	ldr	r2, [r7, #20]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d00e      	beq.n	800191e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f000 fa91 	bl	8001e28 <DMA_CheckFifoParam>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d008      	beq.n	800191e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2240      	movs	r2, #64	@ 0x40
 8001910:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2201      	movs	r2, #1
 8001916:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800191a:	2301      	movs	r3, #1
 800191c:	e016      	b.n	800194c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	697a      	ldr	r2, [r7, #20]
 8001924:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f000 fa48 	bl	8001dbc <DMA_CalcBaseAndBitshift>
 800192c:	4603      	mov	r3, r0
 800192e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001934:	223f      	movs	r2, #63	@ 0x3f
 8001936:	409a      	lsls	r2, r3
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2201      	movs	r2, #1
 8001946:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800194a:	2300      	movs	r3, #0
}
 800194c:	4618      	mov	r0, r3
 800194e:	3718      	adds	r7, #24
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	f010803f 	.word	0xf010803f

08001958 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
 8001964:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001966:	2300      	movs	r3, #0
 8001968:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800196e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001976:	2b01      	cmp	r3, #1
 8001978:	d101      	bne.n	800197e <HAL_DMA_Start_IT+0x26>
 800197a:	2302      	movs	r3, #2
 800197c:	e040      	b.n	8001a00 <HAL_DMA_Start_IT+0xa8>
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2201      	movs	r2, #1
 8001982:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b01      	cmp	r3, #1
 8001990:	d12f      	bne.n	80019f2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2202      	movs	r2, #2
 8001996:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2200      	movs	r2, #0
 800199e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	68b9      	ldr	r1, [r7, #8]
 80019a6:	68f8      	ldr	r0, [r7, #12]
 80019a8:	f000 f9da 	bl	8001d60 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019b0:	223f      	movs	r2, #63	@ 0x3f
 80019b2:	409a      	lsls	r2, r3
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f042 0216 	orr.w	r2, r2, #22
 80019c6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d007      	beq.n	80019e0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f042 0208 	orr.w	r2, r2, #8
 80019de:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f042 0201 	orr.w	r2, r2, #1
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	e005      	b.n	80019fe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80019fa:	2302      	movs	r3, #2
 80019fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80019fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d004      	beq.n	8001a26 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2280      	movs	r2, #128	@ 0x80
 8001a20:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e00c      	b.n	8001a40 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2205      	movs	r2, #5
 8001a2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f022 0201 	bic.w	r2, r2, #1
 8001a3c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001a54:	2300      	movs	r3, #0
 8001a56:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a58:	4b8e      	ldr	r3, [pc, #568]	@ (8001c94 <HAL_DMA_IRQHandler+0x248>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a8e      	ldr	r2, [pc, #568]	@ (8001c98 <HAL_DMA_IRQHandler+0x24c>)
 8001a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a62:	0a9b      	lsrs	r3, r3, #10
 8001a64:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a6a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a76:	2208      	movs	r2, #8
 8001a78:	409a      	lsls	r2, r3
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d01a      	beq.n	8001ab8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0304 	and.w	r3, r3, #4
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d013      	beq.n	8001ab8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f022 0204 	bic.w	r2, r2, #4
 8001a9e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aa4:	2208      	movs	r2, #8
 8001aa6:	409a      	lsls	r2, r3
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ab0:	f043 0201 	orr.w	r2, r3, #1
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001abc:	2201      	movs	r2, #1
 8001abe:	409a      	lsls	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d012      	beq.n	8001aee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	695b      	ldr	r3, [r3, #20]
 8001ace:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d00b      	beq.n	8001aee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ada:	2201      	movs	r2, #1
 8001adc:	409a      	lsls	r2, r3
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ae6:	f043 0202 	orr.w	r2, r3, #2
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001af2:	2204      	movs	r2, #4
 8001af4:	409a      	lsls	r2, r3
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	4013      	ands	r3, r2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d012      	beq.n	8001b24 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d00b      	beq.n	8001b24 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b10:	2204      	movs	r2, #4
 8001b12:	409a      	lsls	r2, r3
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b1c:	f043 0204 	orr.w	r2, r3, #4
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b28:	2210      	movs	r2, #16
 8001b2a:	409a      	lsls	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d043      	beq.n	8001bbc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0308 	and.w	r3, r3, #8
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d03c      	beq.n	8001bbc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b46:	2210      	movs	r2, #16
 8001b48:	409a      	lsls	r2, r3
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d018      	beq.n	8001b8e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d108      	bne.n	8001b7c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d024      	beq.n	8001bbc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	4798      	blx	r3
 8001b7a:	e01f      	b.n	8001bbc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d01b      	beq.n	8001bbc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	4798      	blx	r3
 8001b8c:	e016      	b.n	8001bbc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d107      	bne.n	8001bac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f022 0208 	bic.w	r2, r2, #8
 8001baa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d003      	beq.n	8001bbc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bc0:	2220      	movs	r2, #32
 8001bc2:	409a      	lsls	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f000 808f 	beq.w	8001cec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0310 	and.w	r3, r3, #16
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	f000 8087 	beq.w	8001cec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001be2:	2220      	movs	r2, #32
 8001be4:	409a      	lsls	r2, r3
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b05      	cmp	r3, #5
 8001bf4:	d136      	bne.n	8001c64 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f022 0216 	bic.w	r2, r2, #22
 8001c04:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	695a      	ldr	r2, [r3, #20]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c14:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d103      	bne.n	8001c26 <HAL_DMA_IRQHandler+0x1da>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d007      	beq.n	8001c36 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f022 0208 	bic.w	r2, r2, #8
 8001c34:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c3a:	223f      	movs	r2, #63	@ 0x3f
 8001c3c:	409a      	lsls	r2, r3
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2201      	movs	r2, #1
 8001c46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d07e      	beq.n	8001d58 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	4798      	blx	r3
        }
        return;
 8001c62:	e079      	b.n	8001d58 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d01d      	beq.n	8001cae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d10d      	bne.n	8001c9c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d031      	beq.n	8001cec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	4798      	blx	r3
 8001c90:	e02c      	b.n	8001cec <HAL_DMA_IRQHandler+0x2a0>
 8001c92:	bf00      	nop
 8001c94:	20000000 	.word	0x20000000
 8001c98:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d023      	beq.n	8001cec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	4798      	blx	r3
 8001cac:	e01e      	b.n	8001cec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d10f      	bne.n	8001cdc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f022 0210 	bic.w	r2, r2, #16
 8001cca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d003      	beq.n	8001cec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d032      	beq.n	8001d5a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cf8:	f003 0301 	and.w	r3, r3, #1
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d022      	beq.n	8001d46 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2205      	movs	r2, #5
 8001d04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f022 0201 	bic.w	r2, r2, #1
 8001d16:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	60bb      	str	r3, [r7, #8]
 8001d1e:	697a      	ldr	r2, [r7, #20]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d307      	bcc.n	8001d34 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1f2      	bne.n	8001d18 <HAL_DMA_IRQHandler+0x2cc>
 8001d32:	e000      	b.n	8001d36 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001d34:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d005      	beq.n	8001d5a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	4798      	blx	r3
 8001d56:	e000      	b.n	8001d5a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001d58:	bf00      	nop
    }
  }
}
 8001d5a:	3718      	adds	r7, #24
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
 8001d6c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001d7c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	2b40      	cmp	r3, #64	@ 0x40
 8001d8c:	d108      	bne.n	8001da0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	68ba      	ldr	r2, [r7, #8]
 8001d9c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001d9e:	e007      	b.n	8001db0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	68ba      	ldr	r2, [r7, #8]
 8001da6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	60da      	str	r2, [r3, #12]
}
 8001db0:	bf00      	nop
 8001db2:	3714      	adds	r7, #20
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	3b10      	subs	r3, #16
 8001dcc:	4a14      	ldr	r2, [pc, #80]	@ (8001e20 <DMA_CalcBaseAndBitshift+0x64>)
 8001dce:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd2:	091b      	lsrs	r3, r3, #4
 8001dd4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001dd6:	4a13      	ldr	r2, [pc, #76]	@ (8001e24 <DMA_CalcBaseAndBitshift+0x68>)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	4413      	add	r3, r2
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	461a      	mov	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2b03      	cmp	r3, #3
 8001de8:	d909      	bls.n	8001dfe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001df2:	f023 0303 	bic.w	r3, r3, #3
 8001df6:	1d1a      	adds	r2, r3, #4
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	659a      	str	r2, [r3, #88]	@ 0x58
 8001dfc:	e007      	b.n	8001e0e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001e06:	f023 0303 	bic.w	r3, r3, #3
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3714      	adds	r7, #20
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	aaaaaaab 	.word	0xaaaaaaab
 8001e24:	08003c98 	.word	0x08003c98

08001e28 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e30:	2300      	movs	r3, #0
 8001e32:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e38:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d11f      	bne.n	8001e82 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	2b03      	cmp	r3, #3
 8001e46:	d856      	bhi.n	8001ef6 <DMA_CheckFifoParam+0xce>
 8001e48:	a201      	add	r2, pc, #4	@ (adr r2, 8001e50 <DMA_CheckFifoParam+0x28>)
 8001e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e4e:	bf00      	nop
 8001e50:	08001e61 	.word	0x08001e61
 8001e54:	08001e73 	.word	0x08001e73
 8001e58:	08001e61 	.word	0x08001e61
 8001e5c:	08001ef7 	.word	0x08001ef7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e64:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d046      	beq.n	8001efa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e70:	e043      	b.n	8001efa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e76:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001e7a:	d140      	bne.n	8001efe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e80:	e03d      	b.n	8001efe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e8a:	d121      	bne.n	8001ed0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	2b03      	cmp	r3, #3
 8001e90:	d837      	bhi.n	8001f02 <DMA_CheckFifoParam+0xda>
 8001e92:	a201      	add	r2, pc, #4	@ (adr r2, 8001e98 <DMA_CheckFifoParam+0x70>)
 8001e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e98:	08001ea9 	.word	0x08001ea9
 8001e9c:	08001eaf 	.word	0x08001eaf
 8001ea0:	08001ea9 	.word	0x08001ea9
 8001ea4:	08001ec1 	.word	0x08001ec1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	73fb      	strb	r3, [r7, #15]
      break;
 8001eac:	e030      	b.n	8001f10 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eb2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d025      	beq.n	8001f06 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ebe:	e022      	b.n	8001f06 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001ec8:	d11f      	bne.n	8001f0a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001ece:	e01c      	b.n	8001f0a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d903      	bls.n	8001ede <DMA_CheckFifoParam+0xb6>
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	2b03      	cmp	r3, #3
 8001eda:	d003      	beq.n	8001ee4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001edc:	e018      	b.n	8001f10 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	73fb      	strb	r3, [r7, #15]
      break;
 8001ee2:	e015      	b.n	8001f10 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ee8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d00e      	beq.n	8001f0e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	73fb      	strb	r3, [r7, #15]
      break;
 8001ef4:	e00b      	b.n	8001f0e <DMA_CheckFifoParam+0xe6>
      break;
 8001ef6:	bf00      	nop
 8001ef8:	e00a      	b.n	8001f10 <DMA_CheckFifoParam+0xe8>
      break;
 8001efa:	bf00      	nop
 8001efc:	e008      	b.n	8001f10 <DMA_CheckFifoParam+0xe8>
      break;
 8001efe:	bf00      	nop
 8001f00:	e006      	b.n	8001f10 <DMA_CheckFifoParam+0xe8>
      break;
 8001f02:	bf00      	nop
 8001f04:	e004      	b.n	8001f10 <DMA_CheckFifoParam+0xe8>
      break;
 8001f06:	bf00      	nop
 8001f08:	e002      	b.n	8001f10 <DMA_CheckFifoParam+0xe8>
      break;   
 8001f0a:	bf00      	nop
 8001f0c:	e000      	b.n	8001f10 <DMA_CheckFifoParam+0xe8>
      break;
 8001f0e:	bf00      	nop
    }
  } 
  
  return status; 
 8001f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3714      	adds	r7, #20
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop

08001f20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b089      	sub	sp, #36	@ 0x24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f32:	2300      	movs	r3, #0
 8001f34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f36:	2300      	movs	r3, #0
 8001f38:	61fb      	str	r3, [r7, #28]
 8001f3a:	e16b      	b.n	8002214 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	697a      	ldr	r2, [r7, #20]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	f040 815a 	bne.w	800220e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f003 0303 	and.w	r3, r3, #3
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d005      	beq.n	8001f72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d130      	bne.n	8001fd4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	2203      	movs	r2, #3
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	43db      	mvns	r3, r3
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4013      	ands	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	68da      	ldr	r2, [r3, #12]
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	fa02 f303 	lsl.w	r3, r2, r3
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fa8:	2201      	movs	r2, #1
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	091b      	lsrs	r3, r3, #4
 8001fbe:	f003 0201 	and.w	r2, r3, #1
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f003 0303 	and.w	r3, r3, #3
 8001fdc:	2b03      	cmp	r3, #3
 8001fde:	d017      	beq.n	8002010 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	2203      	movs	r2, #3
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	689a      	ldr	r2, [r3, #8]
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	4313      	orrs	r3, r2
 8002008:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f003 0303 	and.w	r3, r3, #3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d123      	bne.n	8002064 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	08da      	lsrs	r2, r3, #3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	3208      	adds	r2, #8
 8002024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002028:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	f003 0307 	and.w	r3, r3, #7
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	220f      	movs	r2, #15
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	43db      	mvns	r3, r3
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	4013      	ands	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	691a      	ldr	r2, [r3, #16]
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4313      	orrs	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	08da      	lsrs	r2, r3, #3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	3208      	adds	r2, #8
 800205e:	69b9      	ldr	r1, [r7, #24]
 8002060:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	2203      	movs	r2, #3
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	43db      	mvns	r3, r3
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	4013      	ands	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f003 0203 	and.w	r2, r3, #3
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4313      	orrs	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f000 80b4 	beq.w	800220e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020a6:	2300      	movs	r3, #0
 80020a8:	60fb      	str	r3, [r7, #12]
 80020aa:	4b60      	ldr	r3, [pc, #384]	@ (800222c <HAL_GPIO_Init+0x30c>)
 80020ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ae:	4a5f      	ldr	r2, [pc, #380]	@ (800222c <HAL_GPIO_Init+0x30c>)
 80020b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80020b6:	4b5d      	ldr	r3, [pc, #372]	@ (800222c <HAL_GPIO_Init+0x30c>)
 80020b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020c2:	4a5b      	ldr	r2, [pc, #364]	@ (8002230 <HAL_GPIO_Init+0x310>)
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	089b      	lsrs	r3, r3, #2
 80020c8:	3302      	adds	r3, #2
 80020ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	f003 0303 	and.w	r3, r3, #3
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	220f      	movs	r2, #15
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	43db      	mvns	r3, r3
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	4013      	ands	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a52      	ldr	r2, [pc, #328]	@ (8002234 <HAL_GPIO_Init+0x314>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d02b      	beq.n	8002146 <HAL_GPIO_Init+0x226>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a51      	ldr	r2, [pc, #324]	@ (8002238 <HAL_GPIO_Init+0x318>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d025      	beq.n	8002142 <HAL_GPIO_Init+0x222>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a50      	ldr	r2, [pc, #320]	@ (800223c <HAL_GPIO_Init+0x31c>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d01f      	beq.n	800213e <HAL_GPIO_Init+0x21e>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a4f      	ldr	r2, [pc, #316]	@ (8002240 <HAL_GPIO_Init+0x320>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d019      	beq.n	800213a <HAL_GPIO_Init+0x21a>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a4e      	ldr	r2, [pc, #312]	@ (8002244 <HAL_GPIO_Init+0x324>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d013      	beq.n	8002136 <HAL_GPIO_Init+0x216>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a4d      	ldr	r2, [pc, #308]	@ (8002248 <HAL_GPIO_Init+0x328>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d00d      	beq.n	8002132 <HAL_GPIO_Init+0x212>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a4c      	ldr	r2, [pc, #304]	@ (800224c <HAL_GPIO_Init+0x32c>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d007      	beq.n	800212e <HAL_GPIO_Init+0x20e>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a4b      	ldr	r2, [pc, #300]	@ (8002250 <HAL_GPIO_Init+0x330>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d101      	bne.n	800212a <HAL_GPIO_Init+0x20a>
 8002126:	2307      	movs	r3, #7
 8002128:	e00e      	b.n	8002148 <HAL_GPIO_Init+0x228>
 800212a:	2308      	movs	r3, #8
 800212c:	e00c      	b.n	8002148 <HAL_GPIO_Init+0x228>
 800212e:	2306      	movs	r3, #6
 8002130:	e00a      	b.n	8002148 <HAL_GPIO_Init+0x228>
 8002132:	2305      	movs	r3, #5
 8002134:	e008      	b.n	8002148 <HAL_GPIO_Init+0x228>
 8002136:	2304      	movs	r3, #4
 8002138:	e006      	b.n	8002148 <HAL_GPIO_Init+0x228>
 800213a:	2303      	movs	r3, #3
 800213c:	e004      	b.n	8002148 <HAL_GPIO_Init+0x228>
 800213e:	2302      	movs	r3, #2
 8002140:	e002      	b.n	8002148 <HAL_GPIO_Init+0x228>
 8002142:	2301      	movs	r3, #1
 8002144:	e000      	b.n	8002148 <HAL_GPIO_Init+0x228>
 8002146:	2300      	movs	r3, #0
 8002148:	69fa      	ldr	r2, [r7, #28]
 800214a:	f002 0203 	and.w	r2, r2, #3
 800214e:	0092      	lsls	r2, r2, #2
 8002150:	4093      	lsls	r3, r2
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	4313      	orrs	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002158:	4935      	ldr	r1, [pc, #212]	@ (8002230 <HAL_GPIO_Init+0x310>)
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	089b      	lsrs	r3, r3, #2
 800215e:	3302      	adds	r3, #2
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002166:	4b3b      	ldr	r3, [pc, #236]	@ (8002254 <HAL_GPIO_Init+0x334>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	43db      	mvns	r3, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4013      	ands	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	4313      	orrs	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800218a:	4a32      	ldr	r2, [pc, #200]	@ (8002254 <HAL_GPIO_Init+0x334>)
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002190:	4b30      	ldr	r3, [pc, #192]	@ (8002254 <HAL_GPIO_Init+0x334>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	43db      	mvns	r3, r3
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4013      	ands	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d003      	beq.n	80021b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021b4:	4a27      	ldr	r2, [pc, #156]	@ (8002254 <HAL_GPIO_Init+0x334>)
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021ba:	4b26      	ldr	r3, [pc, #152]	@ (8002254 <HAL_GPIO_Init+0x334>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	43db      	mvns	r3, r3
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	4013      	ands	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d003      	beq.n	80021de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	4313      	orrs	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021de:	4a1d      	ldr	r2, [pc, #116]	@ (8002254 <HAL_GPIO_Init+0x334>)
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002254 <HAL_GPIO_Init+0x334>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	43db      	mvns	r3, r3
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	4013      	ands	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d003      	beq.n	8002208 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	4313      	orrs	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002208:	4a12      	ldr	r2, [pc, #72]	@ (8002254 <HAL_GPIO_Init+0x334>)
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	3301      	adds	r3, #1
 8002212:	61fb      	str	r3, [r7, #28]
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	2b0f      	cmp	r3, #15
 8002218:	f67f ae90 	bls.w	8001f3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800221c:	bf00      	nop
 800221e:	bf00      	nop
 8002220:	3724      	adds	r7, #36	@ 0x24
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	40023800 	.word	0x40023800
 8002230:	40013800 	.word	0x40013800
 8002234:	40020000 	.word	0x40020000
 8002238:	40020400 	.word	0x40020400
 800223c:	40020800 	.word	0x40020800
 8002240:	40020c00 	.word	0x40020c00
 8002244:	40021000 	.word	0x40021000
 8002248:	40021400 	.word	0x40021400
 800224c:	40021800 	.word	0x40021800
 8002250:	40021c00 	.word	0x40021c00
 8002254:	40013c00 	.word	0x40013c00

08002258 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	460b      	mov	r3, r1
 8002262:	807b      	strh	r3, [r7, #2]
 8002264:	4613      	mov	r3, r2
 8002266:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002268:	787b      	ldrb	r3, [r7, #1]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d003      	beq.n	8002276 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800226e:	887a      	ldrh	r2, [r7, #2]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002274:	e003      	b.n	800227e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002276:	887b      	ldrh	r3, [r7, #2]
 8002278:	041a      	lsls	r2, r3, #16
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	619a      	str	r2, [r3, #24]
}
 800227e:	bf00      	nop
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr

0800228a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800228a:	b480      	push	{r7}
 800228c:	b085      	sub	sp, #20
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
 8002292:	460b      	mov	r3, r1
 8002294:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800229c:	887a      	ldrh	r2, [r7, #2]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	4013      	ands	r3, r2
 80022a2:	041a      	lsls	r2, r3, #16
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	43d9      	mvns	r1, r3
 80022a8:	887b      	ldrh	r3, [r7, #2]
 80022aa:	400b      	ands	r3, r1
 80022ac:	431a      	orrs	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	619a      	str	r2, [r3, #24]
}
 80022b2:	bf00      	nop
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
	...

080022c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e267      	b.n	80027a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d075      	beq.n	80023ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022de:	4b88      	ldr	r3, [pc, #544]	@ (8002500 <HAL_RCC_OscConfig+0x240>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f003 030c 	and.w	r3, r3, #12
 80022e6:	2b04      	cmp	r3, #4
 80022e8:	d00c      	beq.n	8002304 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022ea:	4b85      	ldr	r3, [pc, #532]	@ (8002500 <HAL_RCC_OscConfig+0x240>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022f2:	2b08      	cmp	r3, #8
 80022f4:	d112      	bne.n	800231c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022f6:	4b82      	ldr	r3, [pc, #520]	@ (8002500 <HAL_RCC_OscConfig+0x240>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002302:	d10b      	bne.n	800231c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002304:	4b7e      	ldr	r3, [pc, #504]	@ (8002500 <HAL_RCC_OscConfig+0x240>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d05b      	beq.n	80023c8 <HAL_RCC_OscConfig+0x108>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d157      	bne.n	80023c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e242      	b.n	80027a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002324:	d106      	bne.n	8002334 <HAL_RCC_OscConfig+0x74>
 8002326:	4b76      	ldr	r3, [pc, #472]	@ (8002500 <HAL_RCC_OscConfig+0x240>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a75      	ldr	r2, [pc, #468]	@ (8002500 <HAL_RCC_OscConfig+0x240>)
 800232c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002330:	6013      	str	r3, [r2, #0]
 8002332:	e01d      	b.n	8002370 <HAL_RCC_OscConfig+0xb0>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800233c:	d10c      	bne.n	8002358 <HAL_RCC_OscConfig+0x98>
 800233e:	4b70      	ldr	r3, [pc, #448]	@ (8002500 <HAL_RCC_OscConfig+0x240>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a6f      	ldr	r2, [pc, #444]	@ (8002500 <HAL_RCC_OscConfig+0x240>)
 8002344:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002348:	6013      	str	r3, [r2, #0]
 800234a:	4b6d      	ldr	r3, [pc, #436]	@ (8002500 <HAL_RCC_OscConfig+0x240>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a6c      	ldr	r2, [pc, #432]	@ (8002500 <HAL_RCC_OscConfig+0x240>)
 8002350:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002354:	6013      	str	r3, [r2, #0]
 8002356:	e00b      	b.n	8002370 <HAL_RCC_OscConfig+0xb0>
 8002358:	4b69      	ldr	r3, [pc, #420]	@ (8002500 <HAL_RCC_OscConfig+0x240>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a68      	ldr	r2, [pc, #416]	@ (8002500 <HAL_RCC_OscConfig+0x240>)
 800235e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002362:	6013      	str	r3, [r2, #0]
 8002364:	4b66      	ldr	r3, [pc, #408]	@ (8002500 <HAL_RCC_OscConfig+0x240>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a65      	ldr	r2, [pc, #404]	@ (8002500 <HAL_RCC_OscConfig+0x240>)
 800236a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800236e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d013      	beq.n	80023a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002378:	f7fe fd10 	bl	8000d9c <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002380:	f7fe fd0c 	bl	8000d9c <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b64      	cmp	r3, #100	@ 0x64
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e207      	b.n	80027a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002392:	4b5b      	ldr	r3, [pc, #364]	@ (8002500 <HAL_RCC_OscConfig+0x240>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d0f0      	beq.n	8002380 <HAL_RCC_OscConfig+0xc0>
 800239e:	e014      	b.n	80023ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a0:	f7fe fcfc 	bl	8000d9c <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023a8:	f7fe fcf8 	bl	8000d9c <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b64      	cmp	r3, #100	@ 0x64
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e1f3      	b.n	80027a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ba:	4b51      	ldr	r3, [pc, #324]	@ (8002500 <HAL_RCC_OscConfig+0x240>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1f0      	bne.n	80023a8 <HAL_RCC_OscConfig+0xe8>
 80023c6:	e000      	b.n	80023ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d063      	beq.n	800249e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023d6:	4b4a      	ldr	r3, [pc, #296]	@ (8002500 <HAL_RCC_OscConfig+0x240>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f003 030c 	and.w	r3, r3, #12
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00b      	beq.n	80023fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023e2:	4b47      	ldr	r3, [pc, #284]	@ (8002500 <HAL_RCC_OscConfig+0x240>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023ea:	2b08      	cmp	r3, #8
 80023ec:	d11c      	bne.n	8002428 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023ee:	4b44      	ldr	r3, [pc, #272]	@ (8002500 <HAL_RCC_OscConfig+0x240>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d116      	bne.n	8002428 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023fa:	4b41      	ldr	r3, [pc, #260]	@ (8002500 <HAL_RCC_OscConfig+0x240>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d005      	beq.n	8002412 <HAL_RCC_OscConfig+0x152>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d001      	beq.n	8002412 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e1c7      	b.n	80027a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002412:	4b3b      	ldr	r3, [pc, #236]	@ (8002500 <HAL_RCC_OscConfig+0x240>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	4937      	ldr	r1, [pc, #220]	@ (8002500 <HAL_RCC_OscConfig+0x240>)
 8002422:	4313      	orrs	r3, r2
 8002424:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002426:	e03a      	b.n	800249e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d020      	beq.n	8002472 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002430:	4b34      	ldr	r3, [pc, #208]	@ (8002504 <HAL_RCC_OscConfig+0x244>)
 8002432:	2201      	movs	r2, #1
 8002434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002436:	f7fe fcb1 	bl	8000d9c <HAL_GetTick>
 800243a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800243c:	e008      	b.n	8002450 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800243e:	f7fe fcad 	bl	8000d9c <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e1a8      	b.n	80027a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002450:	4b2b      	ldr	r3, [pc, #172]	@ (8002500 <HAL_RCC_OscConfig+0x240>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0f0      	beq.n	800243e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800245c:	4b28      	ldr	r3, [pc, #160]	@ (8002500 <HAL_RCC_OscConfig+0x240>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	4925      	ldr	r1, [pc, #148]	@ (8002500 <HAL_RCC_OscConfig+0x240>)
 800246c:	4313      	orrs	r3, r2
 800246e:	600b      	str	r3, [r1, #0]
 8002470:	e015      	b.n	800249e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002472:	4b24      	ldr	r3, [pc, #144]	@ (8002504 <HAL_RCC_OscConfig+0x244>)
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002478:	f7fe fc90 	bl	8000d9c <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002480:	f7fe fc8c 	bl	8000d9c <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e187      	b.n	80027a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002492:	4b1b      	ldr	r3, [pc, #108]	@ (8002500 <HAL_RCC_OscConfig+0x240>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1f0      	bne.n	8002480 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0308 	and.w	r3, r3, #8
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d036      	beq.n	8002518 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d016      	beq.n	80024e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024b2:	4b15      	ldr	r3, [pc, #84]	@ (8002508 <HAL_RCC_OscConfig+0x248>)
 80024b4:	2201      	movs	r2, #1
 80024b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b8:	f7fe fc70 	bl	8000d9c <HAL_GetTick>
 80024bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024be:	e008      	b.n	80024d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024c0:	f7fe fc6c 	bl	8000d9c <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e167      	b.n	80027a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002500 <HAL_RCC_OscConfig+0x240>)
 80024d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d0f0      	beq.n	80024c0 <HAL_RCC_OscConfig+0x200>
 80024de:	e01b      	b.n	8002518 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024e0:	4b09      	ldr	r3, [pc, #36]	@ (8002508 <HAL_RCC_OscConfig+0x248>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024e6:	f7fe fc59 	bl	8000d9c <HAL_GetTick>
 80024ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024ec:	e00e      	b.n	800250c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024ee:	f7fe fc55 	bl	8000d9c <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d907      	bls.n	800250c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e150      	b.n	80027a2 <HAL_RCC_OscConfig+0x4e2>
 8002500:	40023800 	.word	0x40023800
 8002504:	42470000 	.word	0x42470000
 8002508:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800250c:	4b88      	ldr	r3, [pc, #544]	@ (8002730 <HAL_RCC_OscConfig+0x470>)
 800250e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d1ea      	bne.n	80024ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0304 	and.w	r3, r3, #4
 8002520:	2b00      	cmp	r3, #0
 8002522:	f000 8097 	beq.w	8002654 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002526:	2300      	movs	r3, #0
 8002528:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800252a:	4b81      	ldr	r3, [pc, #516]	@ (8002730 <HAL_RCC_OscConfig+0x470>)
 800252c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d10f      	bne.n	8002556 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002536:	2300      	movs	r3, #0
 8002538:	60bb      	str	r3, [r7, #8]
 800253a:	4b7d      	ldr	r3, [pc, #500]	@ (8002730 <HAL_RCC_OscConfig+0x470>)
 800253c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253e:	4a7c      	ldr	r2, [pc, #496]	@ (8002730 <HAL_RCC_OscConfig+0x470>)
 8002540:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002544:	6413      	str	r3, [r2, #64]	@ 0x40
 8002546:	4b7a      	ldr	r3, [pc, #488]	@ (8002730 <HAL_RCC_OscConfig+0x470>)
 8002548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800254e:	60bb      	str	r3, [r7, #8]
 8002550:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002552:	2301      	movs	r3, #1
 8002554:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002556:	4b77      	ldr	r3, [pc, #476]	@ (8002734 <HAL_RCC_OscConfig+0x474>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800255e:	2b00      	cmp	r3, #0
 8002560:	d118      	bne.n	8002594 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002562:	4b74      	ldr	r3, [pc, #464]	@ (8002734 <HAL_RCC_OscConfig+0x474>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a73      	ldr	r2, [pc, #460]	@ (8002734 <HAL_RCC_OscConfig+0x474>)
 8002568:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800256c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800256e:	f7fe fc15 	bl	8000d9c <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002574:	e008      	b.n	8002588 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002576:	f7fe fc11 	bl	8000d9c <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e10c      	b.n	80027a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002588:	4b6a      	ldr	r3, [pc, #424]	@ (8002734 <HAL_RCC_OscConfig+0x474>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002590:	2b00      	cmp	r3, #0
 8002592:	d0f0      	beq.n	8002576 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d106      	bne.n	80025aa <HAL_RCC_OscConfig+0x2ea>
 800259c:	4b64      	ldr	r3, [pc, #400]	@ (8002730 <HAL_RCC_OscConfig+0x470>)
 800259e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025a0:	4a63      	ldr	r2, [pc, #396]	@ (8002730 <HAL_RCC_OscConfig+0x470>)
 80025a2:	f043 0301 	orr.w	r3, r3, #1
 80025a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80025a8:	e01c      	b.n	80025e4 <HAL_RCC_OscConfig+0x324>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	2b05      	cmp	r3, #5
 80025b0:	d10c      	bne.n	80025cc <HAL_RCC_OscConfig+0x30c>
 80025b2:	4b5f      	ldr	r3, [pc, #380]	@ (8002730 <HAL_RCC_OscConfig+0x470>)
 80025b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025b6:	4a5e      	ldr	r2, [pc, #376]	@ (8002730 <HAL_RCC_OscConfig+0x470>)
 80025b8:	f043 0304 	orr.w	r3, r3, #4
 80025bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80025be:	4b5c      	ldr	r3, [pc, #368]	@ (8002730 <HAL_RCC_OscConfig+0x470>)
 80025c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025c2:	4a5b      	ldr	r2, [pc, #364]	@ (8002730 <HAL_RCC_OscConfig+0x470>)
 80025c4:	f043 0301 	orr.w	r3, r3, #1
 80025c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80025ca:	e00b      	b.n	80025e4 <HAL_RCC_OscConfig+0x324>
 80025cc:	4b58      	ldr	r3, [pc, #352]	@ (8002730 <HAL_RCC_OscConfig+0x470>)
 80025ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025d0:	4a57      	ldr	r2, [pc, #348]	@ (8002730 <HAL_RCC_OscConfig+0x470>)
 80025d2:	f023 0301 	bic.w	r3, r3, #1
 80025d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80025d8:	4b55      	ldr	r3, [pc, #340]	@ (8002730 <HAL_RCC_OscConfig+0x470>)
 80025da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025dc:	4a54      	ldr	r2, [pc, #336]	@ (8002730 <HAL_RCC_OscConfig+0x470>)
 80025de:	f023 0304 	bic.w	r3, r3, #4
 80025e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d015      	beq.n	8002618 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ec:	f7fe fbd6 	bl	8000d9c <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025f2:	e00a      	b.n	800260a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025f4:	f7fe fbd2 	bl	8000d9c <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002602:	4293      	cmp	r3, r2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e0cb      	b.n	80027a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800260a:	4b49      	ldr	r3, [pc, #292]	@ (8002730 <HAL_RCC_OscConfig+0x470>)
 800260c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d0ee      	beq.n	80025f4 <HAL_RCC_OscConfig+0x334>
 8002616:	e014      	b.n	8002642 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002618:	f7fe fbc0 	bl	8000d9c <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800261e:	e00a      	b.n	8002636 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002620:	f7fe fbbc 	bl	8000d9c <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800262e:	4293      	cmp	r3, r2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e0b5      	b.n	80027a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002636:	4b3e      	ldr	r3, [pc, #248]	@ (8002730 <HAL_RCC_OscConfig+0x470>)
 8002638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1ee      	bne.n	8002620 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002642:	7dfb      	ldrb	r3, [r7, #23]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d105      	bne.n	8002654 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002648:	4b39      	ldr	r3, [pc, #228]	@ (8002730 <HAL_RCC_OscConfig+0x470>)
 800264a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264c:	4a38      	ldr	r2, [pc, #224]	@ (8002730 <HAL_RCC_OscConfig+0x470>)
 800264e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002652:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	2b00      	cmp	r3, #0
 800265a:	f000 80a1 	beq.w	80027a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800265e:	4b34      	ldr	r3, [pc, #208]	@ (8002730 <HAL_RCC_OscConfig+0x470>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f003 030c 	and.w	r3, r3, #12
 8002666:	2b08      	cmp	r3, #8
 8002668:	d05c      	beq.n	8002724 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	2b02      	cmp	r3, #2
 8002670:	d141      	bne.n	80026f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002672:	4b31      	ldr	r3, [pc, #196]	@ (8002738 <HAL_RCC_OscConfig+0x478>)
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002678:	f7fe fb90 	bl	8000d9c <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800267e:	e008      	b.n	8002692 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002680:	f7fe fb8c 	bl	8000d9c <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e087      	b.n	80027a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002692:	4b27      	ldr	r3, [pc, #156]	@ (8002730 <HAL_RCC_OscConfig+0x470>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1f0      	bne.n	8002680 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	69da      	ldr	r2, [r3, #28]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a1b      	ldr	r3, [r3, #32]
 80026a6:	431a      	orrs	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ac:	019b      	lsls	r3, r3, #6
 80026ae:	431a      	orrs	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026b4:	085b      	lsrs	r3, r3, #1
 80026b6:	3b01      	subs	r3, #1
 80026b8:	041b      	lsls	r3, r3, #16
 80026ba:	431a      	orrs	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026c0:	061b      	lsls	r3, r3, #24
 80026c2:	491b      	ldr	r1, [pc, #108]	@ (8002730 <HAL_RCC_OscConfig+0x470>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002738 <HAL_RCC_OscConfig+0x478>)
 80026ca:	2201      	movs	r2, #1
 80026cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ce:	f7fe fb65 	bl	8000d9c <HAL_GetTick>
 80026d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026d4:	e008      	b.n	80026e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026d6:	f7fe fb61 	bl	8000d9c <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e05c      	b.n	80027a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026e8:	4b11      	ldr	r3, [pc, #68]	@ (8002730 <HAL_RCC_OscConfig+0x470>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d0f0      	beq.n	80026d6 <HAL_RCC_OscConfig+0x416>
 80026f4:	e054      	b.n	80027a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026f6:	4b10      	ldr	r3, [pc, #64]	@ (8002738 <HAL_RCC_OscConfig+0x478>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026fc:	f7fe fb4e 	bl	8000d9c <HAL_GetTick>
 8002700:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002702:	e008      	b.n	8002716 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002704:	f7fe fb4a 	bl	8000d9c <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e045      	b.n	80027a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002716:	4b06      	ldr	r3, [pc, #24]	@ (8002730 <HAL_RCC_OscConfig+0x470>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1f0      	bne.n	8002704 <HAL_RCC_OscConfig+0x444>
 8002722:	e03d      	b.n	80027a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d107      	bne.n	800273c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e038      	b.n	80027a2 <HAL_RCC_OscConfig+0x4e2>
 8002730:	40023800 	.word	0x40023800
 8002734:	40007000 	.word	0x40007000
 8002738:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800273c:	4b1b      	ldr	r3, [pc, #108]	@ (80027ac <HAL_RCC_OscConfig+0x4ec>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d028      	beq.n	800279c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002754:	429a      	cmp	r2, r3
 8002756:	d121      	bne.n	800279c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002762:	429a      	cmp	r2, r3
 8002764:	d11a      	bne.n	800279c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800276c:	4013      	ands	r3, r2
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002772:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002774:	4293      	cmp	r3, r2
 8002776:	d111      	bne.n	800279c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002782:	085b      	lsrs	r3, r3, #1
 8002784:	3b01      	subs	r3, #1
 8002786:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002788:	429a      	cmp	r2, r3
 800278a:	d107      	bne.n	800279c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002796:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002798:	429a      	cmp	r2, r3
 800279a:	d001      	beq.n	80027a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e000      	b.n	80027a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3718      	adds	r7, #24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40023800 	.word	0x40023800

080027b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d101      	bne.n	80027c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e0cc      	b.n	800295e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027c4:	4b68      	ldr	r3, [pc, #416]	@ (8002968 <HAL_RCC_ClockConfig+0x1b8>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d90c      	bls.n	80027ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027d2:	4b65      	ldr	r3, [pc, #404]	@ (8002968 <HAL_RCC_ClockConfig+0x1b8>)
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027da:	4b63      	ldr	r3, [pc, #396]	@ (8002968 <HAL_RCC_ClockConfig+0x1b8>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0307 	and.w	r3, r3, #7
 80027e2:	683a      	ldr	r2, [r7, #0]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d001      	beq.n	80027ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e0b8      	b.n	800295e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d020      	beq.n	800283a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0304 	and.w	r3, r3, #4
 8002800:	2b00      	cmp	r3, #0
 8002802:	d005      	beq.n	8002810 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002804:	4b59      	ldr	r3, [pc, #356]	@ (800296c <HAL_RCC_ClockConfig+0x1bc>)
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	4a58      	ldr	r2, [pc, #352]	@ (800296c <HAL_RCC_ClockConfig+0x1bc>)
 800280a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800280e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0308 	and.w	r3, r3, #8
 8002818:	2b00      	cmp	r3, #0
 800281a:	d005      	beq.n	8002828 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800281c:	4b53      	ldr	r3, [pc, #332]	@ (800296c <HAL_RCC_ClockConfig+0x1bc>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	4a52      	ldr	r2, [pc, #328]	@ (800296c <HAL_RCC_ClockConfig+0x1bc>)
 8002822:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002826:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002828:	4b50      	ldr	r3, [pc, #320]	@ (800296c <HAL_RCC_ClockConfig+0x1bc>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	494d      	ldr	r1, [pc, #308]	@ (800296c <HAL_RCC_ClockConfig+0x1bc>)
 8002836:	4313      	orrs	r3, r2
 8002838:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	2b00      	cmp	r3, #0
 8002844:	d044      	beq.n	80028d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d107      	bne.n	800285e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800284e:	4b47      	ldr	r3, [pc, #284]	@ (800296c <HAL_RCC_ClockConfig+0x1bc>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d119      	bne.n	800288e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e07f      	b.n	800295e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	2b02      	cmp	r3, #2
 8002864:	d003      	beq.n	800286e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800286a:	2b03      	cmp	r3, #3
 800286c:	d107      	bne.n	800287e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800286e:	4b3f      	ldr	r3, [pc, #252]	@ (800296c <HAL_RCC_ClockConfig+0x1bc>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d109      	bne.n	800288e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e06f      	b.n	800295e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800287e:	4b3b      	ldr	r3, [pc, #236]	@ (800296c <HAL_RCC_ClockConfig+0x1bc>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e067      	b.n	800295e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800288e:	4b37      	ldr	r3, [pc, #220]	@ (800296c <HAL_RCC_ClockConfig+0x1bc>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f023 0203 	bic.w	r2, r3, #3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	4934      	ldr	r1, [pc, #208]	@ (800296c <HAL_RCC_ClockConfig+0x1bc>)
 800289c:	4313      	orrs	r3, r2
 800289e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028a0:	f7fe fa7c 	bl	8000d9c <HAL_GetTick>
 80028a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028a6:	e00a      	b.n	80028be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028a8:	f7fe fa78 	bl	8000d9c <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e04f      	b.n	800295e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028be:	4b2b      	ldr	r3, [pc, #172]	@ (800296c <HAL_RCC_ClockConfig+0x1bc>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 020c 	and.w	r2, r3, #12
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d1eb      	bne.n	80028a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028d0:	4b25      	ldr	r3, [pc, #148]	@ (8002968 <HAL_RCC_ClockConfig+0x1b8>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d20c      	bcs.n	80028f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028de:	4b22      	ldr	r3, [pc, #136]	@ (8002968 <HAL_RCC_ClockConfig+0x1b8>)
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	b2d2      	uxtb	r2, r2
 80028e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028e6:	4b20      	ldr	r3, [pc, #128]	@ (8002968 <HAL_RCC_ClockConfig+0x1b8>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0307 	and.w	r3, r3, #7
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d001      	beq.n	80028f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e032      	b.n	800295e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0304 	and.w	r3, r3, #4
 8002900:	2b00      	cmp	r3, #0
 8002902:	d008      	beq.n	8002916 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002904:	4b19      	ldr	r3, [pc, #100]	@ (800296c <HAL_RCC_ClockConfig+0x1bc>)
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	4916      	ldr	r1, [pc, #88]	@ (800296c <HAL_RCC_ClockConfig+0x1bc>)
 8002912:	4313      	orrs	r3, r2
 8002914:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0308 	and.w	r3, r3, #8
 800291e:	2b00      	cmp	r3, #0
 8002920:	d009      	beq.n	8002936 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002922:	4b12      	ldr	r3, [pc, #72]	@ (800296c <HAL_RCC_ClockConfig+0x1bc>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	490e      	ldr	r1, [pc, #56]	@ (800296c <HAL_RCC_ClockConfig+0x1bc>)
 8002932:	4313      	orrs	r3, r2
 8002934:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002936:	f000 f821 	bl	800297c <HAL_RCC_GetSysClockFreq>
 800293a:	4602      	mov	r2, r0
 800293c:	4b0b      	ldr	r3, [pc, #44]	@ (800296c <HAL_RCC_ClockConfig+0x1bc>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	091b      	lsrs	r3, r3, #4
 8002942:	f003 030f 	and.w	r3, r3, #15
 8002946:	490a      	ldr	r1, [pc, #40]	@ (8002970 <HAL_RCC_ClockConfig+0x1c0>)
 8002948:	5ccb      	ldrb	r3, [r1, r3]
 800294a:	fa22 f303 	lsr.w	r3, r2, r3
 800294e:	4a09      	ldr	r2, [pc, #36]	@ (8002974 <HAL_RCC_ClockConfig+0x1c4>)
 8002950:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002952:	4b09      	ldr	r3, [pc, #36]	@ (8002978 <HAL_RCC_ClockConfig+0x1c8>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4618      	mov	r0, r3
 8002958:	f7fe f9dc 	bl	8000d14 <HAL_InitTick>

  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3710      	adds	r7, #16
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	40023c00 	.word	0x40023c00
 800296c:	40023800 	.word	0x40023800
 8002970:	08003c88 	.word	0x08003c88
 8002974:	20000000 	.word	0x20000000
 8002978:	20000004 	.word	0x20000004

0800297c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800297c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002980:	b094      	sub	sp, #80	@ 0x50
 8002982:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002984:	2300      	movs	r3, #0
 8002986:	647b      	str	r3, [r7, #68]	@ 0x44
 8002988:	2300      	movs	r3, #0
 800298a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800298c:	2300      	movs	r3, #0
 800298e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002990:	2300      	movs	r3, #0
 8002992:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002994:	4b79      	ldr	r3, [pc, #484]	@ (8002b7c <HAL_RCC_GetSysClockFreq+0x200>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f003 030c 	and.w	r3, r3, #12
 800299c:	2b08      	cmp	r3, #8
 800299e:	d00d      	beq.n	80029bc <HAL_RCC_GetSysClockFreq+0x40>
 80029a0:	2b08      	cmp	r3, #8
 80029a2:	f200 80e1 	bhi.w	8002b68 <HAL_RCC_GetSysClockFreq+0x1ec>
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d002      	beq.n	80029b0 <HAL_RCC_GetSysClockFreq+0x34>
 80029aa:	2b04      	cmp	r3, #4
 80029ac:	d003      	beq.n	80029b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80029ae:	e0db      	b.n	8002b68 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029b0:	4b73      	ldr	r3, [pc, #460]	@ (8002b80 <HAL_RCC_GetSysClockFreq+0x204>)
 80029b2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80029b4:	e0db      	b.n	8002b6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029b6:	4b73      	ldr	r3, [pc, #460]	@ (8002b84 <HAL_RCC_GetSysClockFreq+0x208>)
 80029b8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80029ba:	e0d8      	b.n	8002b6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029bc:	4b6f      	ldr	r3, [pc, #444]	@ (8002b7c <HAL_RCC_GetSysClockFreq+0x200>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80029c4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029c6:	4b6d      	ldr	r3, [pc, #436]	@ (8002b7c <HAL_RCC_GetSysClockFreq+0x200>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d063      	beq.n	8002a9a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029d2:	4b6a      	ldr	r3, [pc, #424]	@ (8002b7c <HAL_RCC_GetSysClockFreq+0x200>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	099b      	lsrs	r3, r3, #6
 80029d8:	2200      	movs	r2, #0
 80029da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80029dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80029de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80029e6:	2300      	movs	r3, #0
 80029e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80029ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80029ee:	4622      	mov	r2, r4
 80029f0:	462b      	mov	r3, r5
 80029f2:	f04f 0000 	mov.w	r0, #0
 80029f6:	f04f 0100 	mov.w	r1, #0
 80029fa:	0159      	lsls	r1, r3, #5
 80029fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a00:	0150      	lsls	r0, r2, #5
 8002a02:	4602      	mov	r2, r0
 8002a04:	460b      	mov	r3, r1
 8002a06:	4621      	mov	r1, r4
 8002a08:	1a51      	subs	r1, r2, r1
 8002a0a:	6139      	str	r1, [r7, #16]
 8002a0c:	4629      	mov	r1, r5
 8002a0e:	eb63 0301 	sbc.w	r3, r3, r1
 8002a12:	617b      	str	r3, [r7, #20]
 8002a14:	f04f 0200 	mov.w	r2, #0
 8002a18:	f04f 0300 	mov.w	r3, #0
 8002a1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a20:	4659      	mov	r1, fp
 8002a22:	018b      	lsls	r3, r1, #6
 8002a24:	4651      	mov	r1, sl
 8002a26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a2a:	4651      	mov	r1, sl
 8002a2c:	018a      	lsls	r2, r1, #6
 8002a2e:	4651      	mov	r1, sl
 8002a30:	ebb2 0801 	subs.w	r8, r2, r1
 8002a34:	4659      	mov	r1, fp
 8002a36:	eb63 0901 	sbc.w	r9, r3, r1
 8002a3a:	f04f 0200 	mov.w	r2, #0
 8002a3e:	f04f 0300 	mov.w	r3, #0
 8002a42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a4e:	4690      	mov	r8, r2
 8002a50:	4699      	mov	r9, r3
 8002a52:	4623      	mov	r3, r4
 8002a54:	eb18 0303 	adds.w	r3, r8, r3
 8002a58:	60bb      	str	r3, [r7, #8]
 8002a5a:	462b      	mov	r3, r5
 8002a5c:	eb49 0303 	adc.w	r3, r9, r3
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	f04f 0200 	mov.w	r2, #0
 8002a66:	f04f 0300 	mov.w	r3, #0
 8002a6a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a6e:	4629      	mov	r1, r5
 8002a70:	024b      	lsls	r3, r1, #9
 8002a72:	4621      	mov	r1, r4
 8002a74:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a78:	4621      	mov	r1, r4
 8002a7a:	024a      	lsls	r2, r1, #9
 8002a7c:	4610      	mov	r0, r2
 8002a7e:	4619      	mov	r1, r3
 8002a80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a82:	2200      	movs	r2, #0
 8002a84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002a8c:	f7fd fb9c 	bl	80001c8 <__aeabi_uldivmod>
 8002a90:	4602      	mov	r2, r0
 8002a92:	460b      	mov	r3, r1
 8002a94:	4613      	mov	r3, r2
 8002a96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a98:	e058      	b.n	8002b4c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a9a:	4b38      	ldr	r3, [pc, #224]	@ (8002b7c <HAL_RCC_GetSysClockFreq+0x200>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	099b      	lsrs	r3, r3, #6
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	4611      	mov	r1, r2
 8002aa6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002aaa:	623b      	str	r3, [r7, #32]
 8002aac:	2300      	movs	r3, #0
 8002aae:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ab0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ab4:	4642      	mov	r2, r8
 8002ab6:	464b      	mov	r3, r9
 8002ab8:	f04f 0000 	mov.w	r0, #0
 8002abc:	f04f 0100 	mov.w	r1, #0
 8002ac0:	0159      	lsls	r1, r3, #5
 8002ac2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ac6:	0150      	lsls	r0, r2, #5
 8002ac8:	4602      	mov	r2, r0
 8002aca:	460b      	mov	r3, r1
 8002acc:	4641      	mov	r1, r8
 8002ace:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ad2:	4649      	mov	r1, r9
 8002ad4:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ad8:	f04f 0200 	mov.w	r2, #0
 8002adc:	f04f 0300 	mov.w	r3, #0
 8002ae0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ae4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ae8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002aec:	ebb2 040a 	subs.w	r4, r2, sl
 8002af0:	eb63 050b 	sbc.w	r5, r3, fp
 8002af4:	f04f 0200 	mov.w	r2, #0
 8002af8:	f04f 0300 	mov.w	r3, #0
 8002afc:	00eb      	lsls	r3, r5, #3
 8002afe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b02:	00e2      	lsls	r2, r4, #3
 8002b04:	4614      	mov	r4, r2
 8002b06:	461d      	mov	r5, r3
 8002b08:	4643      	mov	r3, r8
 8002b0a:	18e3      	adds	r3, r4, r3
 8002b0c:	603b      	str	r3, [r7, #0]
 8002b0e:	464b      	mov	r3, r9
 8002b10:	eb45 0303 	adc.w	r3, r5, r3
 8002b14:	607b      	str	r3, [r7, #4]
 8002b16:	f04f 0200 	mov.w	r2, #0
 8002b1a:	f04f 0300 	mov.w	r3, #0
 8002b1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b22:	4629      	mov	r1, r5
 8002b24:	028b      	lsls	r3, r1, #10
 8002b26:	4621      	mov	r1, r4
 8002b28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b2c:	4621      	mov	r1, r4
 8002b2e:	028a      	lsls	r2, r1, #10
 8002b30:	4610      	mov	r0, r2
 8002b32:	4619      	mov	r1, r3
 8002b34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b36:	2200      	movs	r2, #0
 8002b38:	61bb      	str	r3, [r7, #24]
 8002b3a:	61fa      	str	r2, [r7, #28]
 8002b3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b40:	f7fd fb42 	bl	80001c8 <__aeabi_uldivmod>
 8002b44:	4602      	mov	r2, r0
 8002b46:	460b      	mov	r3, r1
 8002b48:	4613      	mov	r3, r2
 8002b4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b7c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	0c1b      	lsrs	r3, r3, #16
 8002b52:	f003 0303 	and.w	r3, r3, #3
 8002b56:	3301      	adds	r3, #1
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002b5c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002b5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b64:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b66:	e002      	b.n	8002b6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b68:	4b05      	ldr	r3, [pc, #20]	@ (8002b80 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b6a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3750      	adds	r7, #80	@ 0x50
 8002b74:	46bd      	mov	sp, r7
 8002b76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40023800 	.word	0x40023800
 8002b80:	00f42400 	.word	0x00f42400
 8002b84:	007a1200 	.word	0x007a1200

08002b88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e07b      	b.n	8002c92 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d108      	bne.n	8002bb4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002baa:	d009      	beq.n	8002bc0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	61da      	str	r2, [r3, #28]
 8002bb2:	e005      	b.n	8002bc0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d106      	bne.n	8002be0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f7fd ff1e 	bl	8000a1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2202      	movs	r2, #2
 8002be4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002bf6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002c08:	431a      	orrs	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c12:	431a      	orrs	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	431a      	orrs	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	431a      	orrs	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c30:	431a      	orrs	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	69db      	ldr	r3, [r3, #28]
 8002c36:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a1b      	ldr	r3, [r3, #32]
 8002c40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c44:	ea42 0103 	orr.w	r1, r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c4c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	430a      	orrs	r2, r1
 8002c56:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	0c1b      	lsrs	r3, r3, #16
 8002c5e:	f003 0104 	and.w	r1, r3, #4
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c66:	f003 0210 	and.w	r2, r3, #16
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	69da      	ldr	r2, [r3, #28]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c80:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b088      	sub	sp, #32
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	60f8      	str	r0, [r7, #12]
 8002ca2:	60b9      	str	r1, [r7, #8]
 8002ca4:	603b      	str	r3, [r7, #0]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002caa:	2300      	movs	r3, #0
 8002cac:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d101      	bne.n	8002cbc <HAL_SPI_Transmit+0x22>
 8002cb8:	2302      	movs	r3, #2
 8002cba:	e12d      	b.n	8002f18 <HAL_SPI_Transmit+0x27e>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002cc4:	f7fe f86a 	bl	8000d9c <HAL_GetTick>
 8002cc8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002cca:	88fb      	ldrh	r3, [r7, #6]
 8002ccc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d002      	beq.n	8002ce0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002cda:	2302      	movs	r3, #2
 8002cdc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002cde:	e116      	b.n	8002f0e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d002      	beq.n	8002cec <HAL_SPI_Transmit+0x52>
 8002ce6:	88fb      	ldrh	r3, [r7, #6]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d102      	bne.n	8002cf2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002cf0:	e10d      	b.n	8002f0e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2203      	movs	r2, #3
 8002cf6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	68ba      	ldr	r2, [r7, #8]
 8002d04:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	88fa      	ldrh	r2, [r7, #6]
 8002d0a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	88fa      	ldrh	r2, [r7, #6]
 8002d10:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d38:	d10f      	bne.n	8002d5a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d48:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d58:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d64:	2b40      	cmp	r3, #64	@ 0x40
 8002d66:	d007      	beq.n	8002d78 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d76:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d80:	d14f      	bne.n	8002e22 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d002      	beq.n	8002d90 <HAL_SPI_Transmit+0xf6>
 8002d8a:	8afb      	ldrh	r3, [r7, #22]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d142      	bne.n	8002e16 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d94:	881a      	ldrh	r2, [r3, #0]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da0:	1c9a      	adds	r2, r3, #2
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	3b01      	subs	r3, #1
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002db4:	e02f      	b.n	8002e16 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d112      	bne.n	8002dea <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc8:	881a      	ldrh	r2, [r3, #0]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd4:	1c9a      	adds	r2, r3, #2
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	3b01      	subs	r3, #1
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002de8:	e015      	b.n	8002e16 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002dea:	f7fd ffd7 	bl	8000d9c <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d803      	bhi.n	8002e02 <HAL_SPI_Transmit+0x168>
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e00:	d102      	bne.n	8002e08 <HAL_SPI_Transmit+0x16e>
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d106      	bne.n	8002e16 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002e14:	e07b      	b.n	8002f0e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1ca      	bne.n	8002db6 <HAL_SPI_Transmit+0x11c>
 8002e20:	e050      	b.n	8002ec4 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d002      	beq.n	8002e30 <HAL_SPI_Transmit+0x196>
 8002e2a:	8afb      	ldrh	r3, [r7, #22]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d144      	bne.n	8002eba <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	330c      	adds	r3, #12
 8002e3a:	7812      	ldrb	r2, [r2, #0]
 8002e3c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e42:	1c5a      	adds	r2, r3, #1
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002e56:	e030      	b.n	8002eba <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d113      	bne.n	8002e8e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	330c      	adds	r3, #12
 8002e70:	7812      	ldrb	r2, [r2, #0]
 8002e72:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e78:	1c5a      	adds	r2, r3, #1
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	3b01      	subs	r3, #1
 8002e86:	b29a      	uxth	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002e8c:	e015      	b.n	8002eba <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e8e:	f7fd ff85 	bl	8000d9c <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d803      	bhi.n	8002ea6 <HAL_SPI_Transmit+0x20c>
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea4:	d102      	bne.n	8002eac <HAL_SPI_Transmit+0x212>
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d106      	bne.n	8002eba <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002eb8:	e029      	b.n	8002f0e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1c9      	bne.n	8002e58 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	6839      	ldr	r1, [r7, #0]
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f000 f9d1 	bl	8003270 <SPI_EndRxTxTransaction>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d002      	beq.n	8002eda <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d10a      	bne.n	8002ef8 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	613b      	str	r3, [r7, #16]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	613b      	str	r3, [r7, #16]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	613b      	str	r3, [r7, #16]
 8002ef6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d002      	beq.n	8002f06 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	77fb      	strb	r3, [r7, #31]
 8002f04:	e003      	b.n	8002f0e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002f16:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3720      	adds	r7, #32
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b088      	sub	sp, #32
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d10e      	bne.n	8002f60 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d009      	beq.n	8002f60 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d004      	beq.n	8002f60 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	4798      	blx	r3
    return;
 8002f5e:	e0ce      	b.n	80030fe <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d009      	beq.n	8002f7e <HAL_SPI_IRQHandler+0x5e>
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d004      	beq.n	8002f7e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	4798      	blx	r3
    return;
 8002f7c:	e0bf      	b.n	80030fe <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	f003 0320 	and.w	r3, r3, #32
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d10a      	bne.n	8002f9e <HAL_SPI_IRQHandler+0x7e>
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d105      	bne.n	8002f9e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f000 80b0 	beq.w	80030fe <HAL_SPI_IRQHandler+0x1de>
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	f003 0320 	and.w	r3, r3, #32
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f000 80aa 	beq.w	80030fe <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d023      	beq.n	8002ffc <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b03      	cmp	r3, #3
 8002fbe:	d011      	beq.n	8002fe4 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fc4:	f043 0204 	orr.w	r2, r3, #4
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002fcc:	2300      	movs	r3, #0
 8002fce:	617b      	str	r3, [r7, #20]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	617b      	str	r3, [r7, #20]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	617b      	str	r3, [r7, #20]
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	e00b      	b.n	8002ffc <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	613b      	str	r3, [r7, #16]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	613b      	str	r3, [r7, #16]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	613b      	str	r3, [r7, #16]
 8002ff8:	693b      	ldr	r3, [r7, #16]
        return;
 8002ffa:	e080      	b.n	80030fe <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	f003 0320 	and.w	r3, r3, #32
 8003002:	2b00      	cmp	r3, #0
 8003004:	d014      	beq.n	8003030 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800300a:	f043 0201 	orr.w	r2, r3, #1
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003012:	2300      	movs	r3, #0
 8003014:	60fb      	str	r3, [r7, #12]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	60fb      	str	r3, [r7, #12]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800302c:	601a      	str	r2, [r3, #0]
 800302e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00c      	beq.n	8003054 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800303e:	f043 0208 	orr.w	r2, r3, #8
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003046:	2300      	movs	r3, #0
 8003048:	60bb      	str	r3, [r7, #8]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	60bb      	str	r3, [r7, #8]
 8003052:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003058:	2b00      	cmp	r3, #0
 800305a:	d04f      	beq.n	80030fc <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	685a      	ldr	r2, [r3, #4]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800306a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d104      	bne.n	8003088 <HAL_SPI_IRQHandler+0x168>
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	f003 0301 	and.w	r3, r3, #1
 8003084:	2b00      	cmp	r3, #0
 8003086:	d034      	beq.n	80030f2 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	685a      	ldr	r2, [r3, #4]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f022 0203 	bic.w	r2, r2, #3
 8003096:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800309c:	2b00      	cmp	r3, #0
 800309e:	d011      	beq.n	80030c4 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030a4:	4a17      	ldr	r2, [pc, #92]	@ (8003104 <HAL_SPI_IRQHandler+0x1e4>)
 80030a6:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7fe fcab 	bl	8001a08 <HAL_DMA_Abort_IT>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d005      	beq.n	80030c4 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030bc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d016      	beq.n	80030fa <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030d0:	4a0c      	ldr	r2, [pc, #48]	@ (8003104 <HAL_SPI_IRQHandler+0x1e4>)
 80030d2:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030d8:	4618      	mov	r0, r3
 80030da:	f7fe fc95 	bl	8001a08 <HAL_DMA_Abort_IT>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00a      	beq.n	80030fa <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030e8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80030f0:	e003      	b.n	80030fa <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 f808 	bl	8003108 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80030f8:	e000      	b.n	80030fc <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80030fa:	bf00      	nop
    return;
 80030fc:	bf00      	nop
  }
}
 80030fe:	3720      	adds	r7, #32
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	08003139 	.word	0x08003139

08003108 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003110:	bf00      	nop
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800312a:	b2db      	uxtb	r3, r3
}
 800312c:	4618      	mov	r0, r3
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003144:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f7ff ffd8 	bl	8003108 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003158:	bf00      	nop
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b088      	sub	sp, #32
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	603b      	str	r3, [r7, #0]
 800316c:	4613      	mov	r3, r2
 800316e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003170:	f7fd fe14 	bl	8000d9c <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003178:	1a9b      	subs	r3, r3, r2
 800317a:	683a      	ldr	r2, [r7, #0]
 800317c:	4413      	add	r3, r2
 800317e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003180:	f7fd fe0c 	bl	8000d9c <HAL_GetTick>
 8003184:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003186:	4b39      	ldr	r3, [pc, #228]	@ (800326c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	015b      	lsls	r3, r3, #5
 800318c:	0d1b      	lsrs	r3, r3, #20
 800318e:	69fa      	ldr	r2, [r7, #28]
 8003190:	fb02 f303 	mul.w	r3, r2, r3
 8003194:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003196:	e054      	b.n	8003242 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800319e:	d050      	beq.n	8003242 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80031a0:	f7fd fdfc 	bl	8000d9c <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	69fa      	ldr	r2, [r7, #28]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d902      	bls.n	80031b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d13d      	bne.n	8003232 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	685a      	ldr	r2, [r3, #4]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80031c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80031ce:	d111      	bne.n	80031f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031d8:	d004      	beq.n	80031e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031e2:	d107      	bne.n	80031f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031fc:	d10f      	bne.n	800321e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800320c:	601a      	str	r2, [r3, #0]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800321c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e017      	b.n	8003262 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d101      	bne.n	800323c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003238:	2300      	movs	r3, #0
 800323a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	3b01      	subs	r3, #1
 8003240:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	689a      	ldr	r2, [r3, #8]
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	4013      	ands	r3, r2
 800324c:	68ba      	ldr	r2, [r7, #8]
 800324e:	429a      	cmp	r2, r3
 8003250:	bf0c      	ite	eq
 8003252:	2301      	moveq	r3, #1
 8003254:	2300      	movne	r3, #0
 8003256:	b2db      	uxtb	r3, r3
 8003258:	461a      	mov	r2, r3
 800325a:	79fb      	ldrb	r3, [r7, #7]
 800325c:	429a      	cmp	r2, r3
 800325e:	d19b      	bne.n	8003198 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3720      	adds	r7, #32
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	20000000 	.word	0x20000000

08003270 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b088      	sub	sp, #32
 8003274:	af02      	add	r7, sp, #8
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	9300      	str	r3, [sp, #0]
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	2201      	movs	r2, #1
 8003284:	2102      	movs	r1, #2
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	f7ff ff6a 	bl	8003160 <SPI_WaitFlagStateUntilTimeout>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d007      	beq.n	80032a2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003296:	f043 0220 	orr.w	r2, r3, #32
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e032      	b.n	8003308 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80032a2:	4b1b      	ldr	r3, [pc, #108]	@ (8003310 <SPI_EndRxTxTransaction+0xa0>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a1b      	ldr	r2, [pc, #108]	@ (8003314 <SPI_EndRxTxTransaction+0xa4>)
 80032a8:	fba2 2303 	umull	r2, r3, r2, r3
 80032ac:	0d5b      	lsrs	r3, r3, #21
 80032ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80032b2:	fb02 f303 	mul.w	r3, r2, r3
 80032b6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80032c0:	d112      	bne.n	80032e8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	2200      	movs	r2, #0
 80032ca:	2180      	movs	r1, #128	@ 0x80
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f7ff ff47 	bl	8003160 <SPI_WaitFlagStateUntilTimeout>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d016      	beq.n	8003306 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032dc:	f043 0220 	orr.w	r2, r3, #32
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e00f      	b.n	8003308 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00a      	beq.n	8003304 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	3b01      	subs	r3, #1
 80032f2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032fe:	2b80      	cmp	r3, #128	@ 0x80
 8003300:	d0f2      	beq.n	80032e8 <SPI_EndRxTxTransaction+0x78>
 8003302:	e000      	b.n	8003306 <SPI_EndRxTxTransaction+0x96>
        break;
 8003304:	bf00      	nop
  }

  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3718      	adds	r7, #24
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	20000000 	.word	0x20000000
 8003314:	165e9f81 	.word	0x165e9f81

08003318 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e041      	b.n	80033ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d106      	bne.n	8003344 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f7fd fbdc 	bl	8000afc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2202      	movs	r2, #2
 8003348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	3304      	adds	r3, #4
 8003354:	4619      	mov	r1, r3
 8003356:	4610      	mov	r0, r2
 8003358:	f000 fa88 	bl	800386c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3708      	adds	r7, #8
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
	...

080033b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b085      	sub	sp, #20
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d001      	beq.n	80033d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e04e      	b.n	800346e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2202      	movs	r2, #2
 80033d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68da      	ldr	r2, [r3, #12]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f042 0201 	orr.w	r2, r2, #1
 80033e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a23      	ldr	r2, [pc, #140]	@ (800347c <HAL_TIM_Base_Start_IT+0xc4>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d022      	beq.n	8003438 <HAL_TIM_Base_Start_IT+0x80>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033fa:	d01d      	beq.n	8003438 <HAL_TIM_Base_Start_IT+0x80>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a1f      	ldr	r2, [pc, #124]	@ (8003480 <HAL_TIM_Base_Start_IT+0xc8>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d018      	beq.n	8003438 <HAL_TIM_Base_Start_IT+0x80>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a1e      	ldr	r2, [pc, #120]	@ (8003484 <HAL_TIM_Base_Start_IT+0xcc>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d013      	beq.n	8003438 <HAL_TIM_Base_Start_IT+0x80>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a1c      	ldr	r2, [pc, #112]	@ (8003488 <HAL_TIM_Base_Start_IT+0xd0>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d00e      	beq.n	8003438 <HAL_TIM_Base_Start_IT+0x80>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a1b      	ldr	r2, [pc, #108]	@ (800348c <HAL_TIM_Base_Start_IT+0xd4>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d009      	beq.n	8003438 <HAL_TIM_Base_Start_IT+0x80>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a19      	ldr	r2, [pc, #100]	@ (8003490 <HAL_TIM_Base_Start_IT+0xd8>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d004      	beq.n	8003438 <HAL_TIM_Base_Start_IT+0x80>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a18      	ldr	r2, [pc, #96]	@ (8003494 <HAL_TIM_Base_Start_IT+0xdc>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d111      	bne.n	800345c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 0307 	and.w	r3, r3, #7
 8003442:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2b06      	cmp	r3, #6
 8003448:	d010      	beq.n	800346c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f042 0201 	orr.w	r2, r2, #1
 8003458:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800345a:	e007      	b.n	800346c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f042 0201 	orr.w	r2, r2, #1
 800346a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3714      	adds	r7, #20
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	40010000 	.word	0x40010000
 8003480:	40000400 	.word	0x40000400
 8003484:	40000800 	.word	0x40000800
 8003488:	40000c00 	.word	0x40000c00
 800348c:	40010400 	.word	0x40010400
 8003490:	40014000 	.word	0x40014000
 8003494:	40001800 	.word	0x40001800

08003498 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d020      	beq.n	80034fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d01b      	beq.n	80034fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f06f 0202 	mvn.w	r2, #2
 80034cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2201      	movs	r2, #1
 80034d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	f003 0303 	and.w	r3, r3, #3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d003      	beq.n	80034ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 f9a3 	bl	800382e <HAL_TIM_IC_CaptureCallback>
 80034e8:	e005      	b.n	80034f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 f995 	bl	800381a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 f9a6 	bl	8003842 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	f003 0304 	and.w	r3, r3, #4
 8003502:	2b00      	cmp	r3, #0
 8003504:	d020      	beq.n	8003548 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f003 0304 	and.w	r3, r3, #4
 800350c:	2b00      	cmp	r3, #0
 800350e:	d01b      	beq.n	8003548 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f06f 0204 	mvn.w	r2, #4
 8003518:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2202      	movs	r2, #2
 800351e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 f97d 	bl	800382e <HAL_TIM_IC_CaptureCallback>
 8003534:	e005      	b.n	8003542 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f96f 	bl	800381a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 f980 	bl	8003842 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	f003 0308 	and.w	r3, r3, #8
 800354e:	2b00      	cmp	r3, #0
 8003550:	d020      	beq.n	8003594 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f003 0308 	and.w	r3, r3, #8
 8003558:	2b00      	cmp	r3, #0
 800355a:	d01b      	beq.n	8003594 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f06f 0208 	mvn.w	r2, #8
 8003564:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2204      	movs	r2, #4
 800356a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	69db      	ldr	r3, [r3, #28]
 8003572:	f003 0303 	and.w	r3, r3, #3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d003      	beq.n	8003582 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 f957 	bl	800382e <HAL_TIM_IC_CaptureCallback>
 8003580:	e005      	b.n	800358e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 f949 	bl	800381a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f000 f95a 	bl	8003842 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	f003 0310 	and.w	r3, r3, #16
 800359a:	2b00      	cmp	r3, #0
 800359c:	d020      	beq.n	80035e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f003 0310 	and.w	r3, r3, #16
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d01b      	beq.n	80035e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f06f 0210 	mvn.w	r2, #16
 80035b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2208      	movs	r2, #8
 80035b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	69db      	ldr	r3, [r3, #28]
 80035be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f931 	bl	800382e <HAL_TIM_IC_CaptureCallback>
 80035cc:	e005      	b.n	80035da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f923 	bl	800381a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 f934 	bl	8003842 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00c      	beq.n	8003604 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d007      	beq.n	8003604 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f06f 0201 	mvn.w	r2, #1
 80035fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 f901 	bl	8003806 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00c      	beq.n	8003628 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003614:	2b00      	cmp	r3, #0
 8003616:	d007      	beq.n	8003628 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003620:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 faee 	bl	8003c04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00c      	beq.n	800364c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003638:	2b00      	cmp	r3, #0
 800363a:	d007      	beq.n	800364c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 f905 	bl	8003856 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	f003 0320 	and.w	r3, r3, #32
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00c      	beq.n	8003670 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f003 0320 	and.w	r3, r3, #32
 800365c:	2b00      	cmp	r3, #0
 800365e:	d007      	beq.n	8003670 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f06f 0220 	mvn.w	r2, #32
 8003668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 fac0 	bl	8003bf0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003670:	bf00      	nop
 8003672:	3710      	adds	r7, #16
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003682:	2300      	movs	r3, #0
 8003684:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800368c:	2b01      	cmp	r3, #1
 800368e:	d101      	bne.n	8003694 <HAL_TIM_ConfigClockSource+0x1c>
 8003690:	2302      	movs	r3, #2
 8003692:	e0b4      	b.n	80037fe <HAL_TIM_ConfigClockSource+0x186>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2202      	movs	r2, #2
 80036a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80036b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80036ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68ba      	ldr	r2, [r7, #8]
 80036c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036cc:	d03e      	beq.n	800374c <HAL_TIM_ConfigClockSource+0xd4>
 80036ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036d2:	f200 8087 	bhi.w	80037e4 <HAL_TIM_ConfigClockSource+0x16c>
 80036d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036da:	f000 8086 	beq.w	80037ea <HAL_TIM_ConfigClockSource+0x172>
 80036de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036e2:	d87f      	bhi.n	80037e4 <HAL_TIM_ConfigClockSource+0x16c>
 80036e4:	2b70      	cmp	r3, #112	@ 0x70
 80036e6:	d01a      	beq.n	800371e <HAL_TIM_ConfigClockSource+0xa6>
 80036e8:	2b70      	cmp	r3, #112	@ 0x70
 80036ea:	d87b      	bhi.n	80037e4 <HAL_TIM_ConfigClockSource+0x16c>
 80036ec:	2b60      	cmp	r3, #96	@ 0x60
 80036ee:	d050      	beq.n	8003792 <HAL_TIM_ConfigClockSource+0x11a>
 80036f0:	2b60      	cmp	r3, #96	@ 0x60
 80036f2:	d877      	bhi.n	80037e4 <HAL_TIM_ConfigClockSource+0x16c>
 80036f4:	2b50      	cmp	r3, #80	@ 0x50
 80036f6:	d03c      	beq.n	8003772 <HAL_TIM_ConfigClockSource+0xfa>
 80036f8:	2b50      	cmp	r3, #80	@ 0x50
 80036fa:	d873      	bhi.n	80037e4 <HAL_TIM_ConfigClockSource+0x16c>
 80036fc:	2b40      	cmp	r3, #64	@ 0x40
 80036fe:	d058      	beq.n	80037b2 <HAL_TIM_ConfigClockSource+0x13a>
 8003700:	2b40      	cmp	r3, #64	@ 0x40
 8003702:	d86f      	bhi.n	80037e4 <HAL_TIM_ConfigClockSource+0x16c>
 8003704:	2b30      	cmp	r3, #48	@ 0x30
 8003706:	d064      	beq.n	80037d2 <HAL_TIM_ConfigClockSource+0x15a>
 8003708:	2b30      	cmp	r3, #48	@ 0x30
 800370a:	d86b      	bhi.n	80037e4 <HAL_TIM_ConfigClockSource+0x16c>
 800370c:	2b20      	cmp	r3, #32
 800370e:	d060      	beq.n	80037d2 <HAL_TIM_ConfigClockSource+0x15a>
 8003710:	2b20      	cmp	r3, #32
 8003712:	d867      	bhi.n	80037e4 <HAL_TIM_ConfigClockSource+0x16c>
 8003714:	2b00      	cmp	r3, #0
 8003716:	d05c      	beq.n	80037d2 <HAL_TIM_ConfigClockSource+0x15a>
 8003718:	2b10      	cmp	r3, #16
 800371a:	d05a      	beq.n	80037d2 <HAL_TIM_ConfigClockSource+0x15a>
 800371c:	e062      	b.n	80037e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800372e:	f000 f9c3 	bl	8003ab8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003740:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68ba      	ldr	r2, [r7, #8]
 8003748:	609a      	str	r2, [r3, #8]
      break;
 800374a:	e04f      	b.n	80037ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800375c:	f000 f9ac 	bl	8003ab8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	689a      	ldr	r2, [r3, #8]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800376e:	609a      	str	r2, [r3, #8]
      break;
 8003770:	e03c      	b.n	80037ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800377e:	461a      	mov	r2, r3
 8003780:	f000 f920 	bl	80039c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2150      	movs	r1, #80	@ 0x50
 800378a:	4618      	mov	r0, r3
 800378c:	f000 f979 	bl	8003a82 <TIM_ITRx_SetConfig>
      break;
 8003790:	e02c      	b.n	80037ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800379e:	461a      	mov	r2, r3
 80037a0:	f000 f93f 	bl	8003a22 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2160      	movs	r1, #96	@ 0x60
 80037aa:	4618      	mov	r0, r3
 80037ac:	f000 f969 	bl	8003a82 <TIM_ITRx_SetConfig>
      break;
 80037b0:	e01c      	b.n	80037ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037be:	461a      	mov	r2, r3
 80037c0:	f000 f900 	bl	80039c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2140      	movs	r1, #64	@ 0x40
 80037ca:	4618      	mov	r0, r3
 80037cc:	f000 f959 	bl	8003a82 <TIM_ITRx_SetConfig>
      break;
 80037d0:	e00c      	b.n	80037ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4619      	mov	r1, r3
 80037dc:	4610      	mov	r0, r2
 80037de:	f000 f950 	bl	8003a82 <TIM_ITRx_SetConfig>
      break;
 80037e2:	e003      	b.n	80037ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	73fb      	strb	r3, [r7, #15]
      break;
 80037e8:	e000      	b.n	80037ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80037ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80037fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003806:	b480      	push	{r7}
 8003808:	b083      	sub	sp, #12
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800380e:	bf00      	nop
 8003810:	370c      	adds	r7, #12
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr

0800381a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800381a:	b480      	push	{r7}
 800381c:	b083      	sub	sp, #12
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003822:	bf00      	nop
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr

0800382e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800382e:	b480      	push	{r7}
 8003830:	b083      	sub	sp, #12
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003836:	bf00      	nop
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr

08003842 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003842:	b480      	push	{r7}
 8003844:	b083      	sub	sp, #12
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800384a:	bf00      	nop
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr

08003856 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003856:	b480      	push	{r7}
 8003858:	b083      	sub	sp, #12
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800385e:	bf00      	nop
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
	...

0800386c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a46      	ldr	r2, [pc, #280]	@ (8003998 <TIM_Base_SetConfig+0x12c>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d013      	beq.n	80038ac <TIM_Base_SetConfig+0x40>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800388a:	d00f      	beq.n	80038ac <TIM_Base_SetConfig+0x40>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a43      	ldr	r2, [pc, #268]	@ (800399c <TIM_Base_SetConfig+0x130>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d00b      	beq.n	80038ac <TIM_Base_SetConfig+0x40>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4a42      	ldr	r2, [pc, #264]	@ (80039a0 <TIM_Base_SetConfig+0x134>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d007      	beq.n	80038ac <TIM_Base_SetConfig+0x40>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a41      	ldr	r2, [pc, #260]	@ (80039a4 <TIM_Base_SetConfig+0x138>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d003      	beq.n	80038ac <TIM_Base_SetConfig+0x40>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a40      	ldr	r2, [pc, #256]	@ (80039a8 <TIM_Base_SetConfig+0x13c>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d108      	bne.n	80038be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a35      	ldr	r2, [pc, #212]	@ (8003998 <TIM_Base_SetConfig+0x12c>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d02b      	beq.n	800391e <TIM_Base_SetConfig+0xb2>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038cc:	d027      	beq.n	800391e <TIM_Base_SetConfig+0xb2>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a32      	ldr	r2, [pc, #200]	@ (800399c <TIM_Base_SetConfig+0x130>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d023      	beq.n	800391e <TIM_Base_SetConfig+0xb2>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a31      	ldr	r2, [pc, #196]	@ (80039a0 <TIM_Base_SetConfig+0x134>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d01f      	beq.n	800391e <TIM_Base_SetConfig+0xb2>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a30      	ldr	r2, [pc, #192]	@ (80039a4 <TIM_Base_SetConfig+0x138>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d01b      	beq.n	800391e <TIM_Base_SetConfig+0xb2>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a2f      	ldr	r2, [pc, #188]	@ (80039a8 <TIM_Base_SetConfig+0x13c>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d017      	beq.n	800391e <TIM_Base_SetConfig+0xb2>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a2e      	ldr	r2, [pc, #184]	@ (80039ac <TIM_Base_SetConfig+0x140>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d013      	beq.n	800391e <TIM_Base_SetConfig+0xb2>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a2d      	ldr	r2, [pc, #180]	@ (80039b0 <TIM_Base_SetConfig+0x144>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d00f      	beq.n	800391e <TIM_Base_SetConfig+0xb2>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a2c      	ldr	r2, [pc, #176]	@ (80039b4 <TIM_Base_SetConfig+0x148>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d00b      	beq.n	800391e <TIM_Base_SetConfig+0xb2>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a2b      	ldr	r2, [pc, #172]	@ (80039b8 <TIM_Base_SetConfig+0x14c>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d007      	beq.n	800391e <TIM_Base_SetConfig+0xb2>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a2a      	ldr	r2, [pc, #168]	@ (80039bc <TIM_Base_SetConfig+0x150>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d003      	beq.n	800391e <TIM_Base_SetConfig+0xb2>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a29      	ldr	r2, [pc, #164]	@ (80039c0 <TIM_Base_SetConfig+0x154>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d108      	bne.n	8003930 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003924:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	4313      	orrs	r3, r2
 800392e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	4313      	orrs	r3, r2
 800393c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	689a      	ldr	r2, [r3, #8]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a10      	ldr	r2, [pc, #64]	@ (8003998 <TIM_Base_SetConfig+0x12c>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d003      	beq.n	8003964 <TIM_Base_SetConfig+0xf8>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a12      	ldr	r2, [pc, #72]	@ (80039a8 <TIM_Base_SetConfig+0x13c>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d103      	bne.n	800396c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	691a      	ldr	r2, [r3, #16]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b01      	cmp	r3, #1
 800397c:	d105      	bne.n	800398a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	f023 0201 	bic.w	r2, r3, #1
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	611a      	str	r2, [r3, #16]
  }
}
 800398a:	bf00      	nop
 800398c:	3714      	adds	r7, #20
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	40010000 	.word	0x40010000
 800399c:	40000400 	.word	0x40000400
 80039a0:	40000800 	.word	0x40000800
 80039a4:	40000c00 	.word	0x40000c00
 80039a8:	40010400 	.word	0x40010400
 80039ac:	40014000 	.word	0x40014000
 80039b0:	40014400 	.word	0x40014400
 80039b4:	40014800 	.word	0x40014800
 80039b8:	40001800 	.word	0x40001800
 80039bc:	40001c00 	.word	0x40001c00
 80039c0:	40002000 	.word	0x40002000

080039c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b087      	sub	sp, #28
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6a1b      	ldr	r3, [r3, #32]
 80039d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	f023 0201 	bic.w	r2, r3, #1
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80039ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	011b      	lsls	r3, r3, #4
 80039f4:	693a      	ldr	r2, [r7, #16]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	f023 030a 	bic.w	r3, r3, #10
 8003a00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	621a      	str	r2, [r3, #32]
}
 8003a16:	bf00      	nop
 8003a18:	371c      	adds	r7, #28
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr

08003a22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a22:	b480      	push	{r7}
 8003a24:	b087      	sub	sp, #28
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	60f8      	str	r0, [r7, #12]
 8003a2a:	60b9      	str	r1, [r7, #8]
 8003a2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	f023 0210 	bic.w	r2, r3, #16
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003a4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	031b      	lsls	r3, r3, #12
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003a5e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	011b      	lsls	r3, r3, #4
 8003a64:	697a      	ldr	r2, [r7, #20]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	621a      	str	r2, [r3, #32]
}
 8003a76:	bf00      	nop
 8003a78:	371c      	adds	r7, #28
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr

08003a82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a82:	b480      	push	{r7}
 8003a84:	b085      	sub	sp, #20
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
 8003a8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	f043 0307 	orr.w	r3, r3, #7
 8003aa4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	609a      	str	r2, [r3, #8]
}
 8003aac:	bf00      	nop
 8003aae:	3714      	adds	r7, #20
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b087      	sub	sp, #28
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
 8003ac4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ad2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	021a      	lsls	r2, r3, #8
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	431a      	orrs	r2, r3
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	697a      	ldr	r2, [r7, #20]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	697a      	ldr	r2, [r7, #20]
 8003aea:	609a      	str	r2, [r3, #8]
}
 8003aec:	bf00      	nop
 8003aee:	371c      	adds	r7, #28
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d101      	bne.n	8003b10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	e05a      	b.n	8003bc6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2202      	movs	r2, #2
 8003b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a21      	ldr	r2, [pc, #132]	@ (8003bd4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d022      	beq.n	8003b9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b5c:	d01d      	beq.n	8003b9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a1d      	ldr	r2, [pc, #116]	@ (8003bd8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d018      	beq.n	8003b9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a1b      	ldr	r2, [pc, #108]	@ (8003bdc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d013      	beq.n	8003b9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a1a      	ldr	r2, [pc, #104]	@ (8003be0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d00e      	beq.n	8003b9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a18      	ldr	r2, [pc, #96]	@ (8003be4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d009      	beq.n	8003b9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a17      	ldr	r2, [pc, #92]	@ (8003be8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d004      	beq.n	8003b9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a15      	ldr	r2, [pc, #84]	@ (8003bec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d10c      	bne.n	8003bb4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ba0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	68ba      	ldr	r2, [r7, #8]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68ba      	ldr	r2, [r7, #8]
 8003bb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3714      	adds	r7, #20
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	40010000 	.word	0x40010000
 8003bd8:	40000400 	.word	0x40000400
 8003bdc:	40000800 	.word	0x40000800
 8003be0:	40000c00 	.word	0x40000c00
 8003be4:	40010400 	.word	0x40010400
 8003be8:	40014000 	.word	0x40014000
 8003bec:	40001800 	.word	0x40001800

08003bf0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c0c:	bf00      	nop
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <memset>:
 8003c18:	4402      	add	r2, r0
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d100      	bne.n	8003c22 <memset+0xa>
 8003c20:	4770      	bx	lr
 8003c22:	f803 1b01 	strb.w	r1, [r3], #1
 8003c26:	e7f9      	b.n	8003c1c <memset+0x4>

08003c28 <__libc_init_array>:
 8003c28:	b570      	push	{r4, r5, r6, lr}
 8003c2a:	4d0d      	ldr	r5, [pc, #52]	@ (8003c60 <__libc_init_array+0x38>)
 8003c2c:	4c0d      	ldr	r4, [pc, #52]	@ (8003c64 <__libc_init_array+0x3c>)
 8003c2e:	1b64      	subs	r4, r4, r5
 8003c30:	10a4      	asrs	r4, r4, #2
 8003c32:	2600      	movs	r6, #0
 8003c34:	42a6      	cmp	r6, r4
 8003c36:	d109      	bne.n	8003c4c <__libc_init_array+0x24>
 8003c38:	4d0b      	ldr	r5, [pc, #44]	@ (8003c68 <__libc_init_array+0x40>)
 8003c3a:	4c0c      	ldr	r4, [pc, #48]	@ (8003c6c <__libc_init_array+0x44>)
 8003c3c:	f000 f818 	bl	8003c70 <_init>
 8003c40:	1b64      	subs	r4, r4, r5
 8003c42:	10a4      	asrs	r4, r4, #2
 8003c44:	2600      	movs	r6, #0
 8003c46:	42a6      	cmp	r6, r4
 8003c48:	d105      	bne.n	8003c56 <__libc_init_array+0x2e>
 8003c4a:	bd70      	pop	{r4, r5, r6, pc}
 8003c4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c50:	4798      	blx	r3
 8003c52:	3601      	adds	r6, #1
 8003c54:	e7ee      	b.n	8003c34 <__libc_init_array+0xc>
 8003c56:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c5a:	4798      	blx	r3
 8003c5c:	3601      	adds	r6, #1
 8003c5e:	e7f2      	b.n	8003c46 <__libc_init_array+0x1e>
 8003c60:	08003ca8 	.word	0x08003ca8
 8003c64:	08003ca8 	.word	0x08003ca8
 8003c68:	08003ca8 	.word	0x08003ca8
 8003c6c:	08003cac 	.word	0x08003cac

08003c70 <_init>:
 8003c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c72:	bf00      	nop
 8003c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c76:	bc08      	pop	{r3}
 8003c78:	469e      	mov	lr, r3
 8003c7a:	4770      	bx	lr

08003c7c <_fini>:
 8003c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c7e:	bf00      	nop
 8003c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c82:	bc08      	pop	{r3}
 8003c84:	469e      	mov	lr, r3
 8003c86:	4770      	bx	lr
